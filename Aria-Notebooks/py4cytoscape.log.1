HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1139,1142,1145,1148,1150,1152,1154,1156,1159,648,1161,650,1163,652,1165,655,1168,1170,658,1172,661,1174,1176,664,1178,666,1180,668,1182,1184,673,1186,675,1188,677,1190,679,1193,681,1195,683,1197,685,687,1200,689,1203,691,1205,693,1207,695,697,1210,699,1212,701,1215,703,705,1218,707,1220,709,1222,711,1224,713,1226,715,1228,717,1231,719,1233,721,1235,723,725,1238,727,1241,729,1243,731,1245,733,1247,735,1249,737,1251,739,1253,741,1255,743,1257,745,1259,748,1261,750,1263,752,1265,1267,755,1269,757,1271,759,1273,761,1275,763,1277,765,1279,767,1281,769,1283,1285,773,1287,775,1289,1291,779,1293,781,1295,783,1297,785,1299,788,1301,790,1303,792,1305,794,1307,796,1309,798,1311,1313,801,1315,803,1317,805,1319,807,1321,809,1323,811,1325,813,815,1328,817,1330,819,308,1333,821,823,1336,312,825,314,1339,827,316,1341,829,318,1343,831,320,1345,833,322,1347,835,324,1349,837,326,1351,839,328,841,1354,330,843,332,1357,845,334,1360,848,336,1362,850,338,1364,852,340,1366,854,342,1368,856,344,858,346,1371,860,348,1374,862,350,1376,864,352,1378,866,354,868,356,1381,870,358,1383,872,360,1385,874,362,1388,876,364,878,366,1391,880,368,1393,370,1395,372,1397,374,1399,376,1401,378,380,1405,382,1407,384,1409,386,1411,388,1413,390,1416,392,1418,394,1420,396,1422,398,400,1425,402,1428,404,1430,406,1432,408,410,1435,412,1437,414,1439,416,1441,418,1443,420,1445,422,1447,424,1449,426,428,1453,430,1455,432,1457,434,1459,436,1462,438,1464,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478]
Returning 'cyrest_get': [1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1139, 1142, 1145, 1148, 1150, 1152, 1154, 1156, 1159, 648, 1161, 650, 1163, 652, 1165, 655, 1168, 1170, 658, 1172, 661, 1174, 1176, 664, 1178, 666, 1180, 668, 1182, 1184, 673, 1186, 675, 1188, 677, 1190, 679, 1193, 681, 1195, 683, 1197, 685, 687, 1200, 689, 1203, 691, 1205, 693, 1207, 695, 697, 1210, 699, 1212, 701, 1215, 703, 705, 1218, 707, 1220, 709, 1222, 711, 1224, 713, 1226, 715, 1228, 717, 1231, 719, 1233, 721, 1235, 723, 725, 1238, 727, 1241, 729, 1243, 731, 1245, 733, 1247, 735, 1249, 737, 1251, 739, 1253, 741, 1255, 743, 1257, 745, 1259, 748, 1261, 750, 1263, 752, 1265, 1267, 755, 1269, 757, 1271, 759, 1273, 761, 1275, 763, 1277, 765, 1279, 767, 1281, 769, 1283, 1285, 773, 1287, 775, 1289, 1291, 779, 1293, 781, 1295, 783, 1297, 785, 1299, 788, 1301, 790, 1303, 792, 1305, 794, 1307, 796, 1309, 798, 1311, 1313, 801, 1315, 803, 1317, 805, 1319, 807, 1321, 809, 1323, 811, 1325, 813, 815, 1328, 817, 1330, 819, 308, 1333, 821, 823, 1336, 312, 825, 314, 1339, 827, 316, 1341, 829, 318, 1343, 831, 320, 1345, 833, 322, 1347, 835, 324, 1349, 837, 326, 1351, 839, 328, 841, 1354, 330, 843, 332, 1357, 845, 334, 1360, 848, 336, 1362, 850, 338, 1364, 852, 340, 1366, 854, 342, 1368, 856, 344, 858, 346, 1371, 860, 348, 1374, 862, 350, 1376, 864, 352, 1378, 866, 354, 868, 356, 1381, 870, 358, 1383, 872, 360, 1385, 874, 362, 1388, 876, 364, 878, 366, 1391, 880, 368, 1393, 370, 1395, 372, 1397, 374, 1399, 376, 1401, 378, 380, 1405, 382, 1407, 384, 1409, 386, 1411, 388, 1413, 390, 1416, 392, 1418, 394, 1420, 396, 1422, 398, 400, 1425, 402, 1428, 404, 1430, 406, 1432, 408, 410, 1435, 412, 1437, 414, 1439, 416, 1441, 418, 1443, 420, 1445, 422, 1447, 424, 1449, 426, 428, 1453, 430, 1455, 432, 1457, 434, 1459, 436, 1462, 438, 1464, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478]
Returning 'get_selected_node_count': 351
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1139,1142,1145,1148,1150,1152,1154,1156,1159,648,1161,650,1163,652,1165,655,1168,1170,658,1172,661,1174,1176,664,1178,666,1180,668,1182,1184,673,1186,675,1188,677,1190,679,1193,681,1195,683,1197,685,687,1200,689,1203,691,1205,693,1207,695,697,1210,699,1212,701,1215,703,705,1218,707,1220,709,1222,711,1224,713,1226,715,1228,717,1231,719,1233,721,1235,723,725,1238,727,1241,729,1243,731,1245,733,1247,735,1249,737,1251,739,1253,741,1255,743,1257,745,1259,748,1261,750,1263,752,1265,1267,755,1269,757,1271,759,1273,761,1275,763,1277,765,1279,767,1281,769,1283,1285,773,1287,775,1289,1291,779,1293,781,1295,783,1297,785,1299,788,1301,790,1303,792,1305,794,1307,796,1309,798,1311,1313,801,1315,803,1317,805,1319,807,1321,809,1323,811,1325,813,815,1328,817,1330,819,308,1333,821,823,1336,312,825,314,1339,827,316,1341,829,318,1343,831,320,1345,833,322,1347,835,324,1349,837,326,1351,839,328,841,1354,330,843,332,1357,845,334,1360,848,336,1362,850,338,1364,852,340,1366,854,342,1368,856,344,858,346,1371,860,348,1374,862,350,1376,864,352,1378,866,354,868,356,1381,870,358,1383,872,360,1385,874,362,1388,876,364,878,366,1391,880,368,1393,370,1395,372,1397,374,1399,376,1401,378,380,1405,382,1407,384,1409,386,1411,388,1413,390,1416,392,1418,394,1420,396,1422,398,400,1425,402,1428,404,1430,406,1432,408,410,1435,412,1437,414,1439,416,1441,418,1443,420,1445,422,1447,424,1449,426,428,1453,430,1455,432,1457,434,1459,436,1462,438,1464,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478]
Returning 'cyrest_get': [1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1139, 1142, 1145, 1148, 1150, 1152, 1154, 1156, 1159, 648, 1161, 650, 1163, 652, 1165, 655, 1168, 1170, 658, 1172, 661, 1174, 1176, 664, 1178, 666, 1180, 668, 1182, 1184, 673, 1186, 675, 1188, 677, 1190, 679, 1193, 681, 1195, 683, 1197, 685, 687, 1200, 689, 1203, 691, 1205, 693, 1207, 695, 697, 1210, 699, 1212, 701, 1215, 703, 705, 1218, 707, 1220, 709, 1222, 711, 1224, 713, 1226, 715, 1228, 717, 1231, 719, 1233, 721, 1235, 723, 725, 1238, 727, 1241, 729, 1243, 731, 1245, 733, 1247, 735, 1249, 737, 1251, 739, 1253, 741, 1255, 743, 1257, 745, 1259, 748, 1261, 750, 1263, 752, 1265, 1267, 755, 1269, 757, 1271, 759, 1273, 761, 1275, 763, 1277, 765, 1279, 767, 1281, 769, 1283, 1285, 773, 1287, 775, 1289, 1291, 779, 1293, 781, 1295, 783, 1297, 785, 1299, 788, 1301, 790, 1303, 792, 1305, 794, 1307, 796, 1309, 798, 1311, 1313, 801, 1315, 803, 1317, 805, 1319, 807, 1321, 809, 1323, 811, 1325, 813, 815, 1328, 817, 1330, 819, 308, 1333, 821, 823, 1336, 312, 825, 314, 1339, 827, 316, 1341, 829, 318, 1343, 831, 320, 1345, 833, 322, 1347, 835, 324, 1349, 837, 326, 1351, 839, 328, 841, 1354, 330, 843, 332, 1357, 845, 334, 1360, 848, 336, 1362, 850, 338, 1364, 852, 340, 1366, 854, 342, 1368, 856, 344, 858, 346, 1371, 860, 348, 1374, 862, 350, 1376, 864, 352, 1378, 866, 354, 868, 356, 1381, 870, 358, 1383, 872, 360, 1385, 874, 362, 1388, 876, 364, 878, 366, 1391, 880, 368, 1393, 370, 1395, 372, 1397, 374, 1399, 376, 1401, 378, 380, 1405, 382, 1407, 384, 1409, 386, 1411, 388, 1413, 390, 1416, 392, 1418, 394, 1420, 396, 1422, 398, 400, 1425, 402, 1428, 404, 1430, 406, 1432, 408, 410, 1435, 412, 1437, 414, 1439, 416, 1441, 418, 1443, 420, 1445, 422, 1447, 424, 1449, 426, 428, 1453, 430, 1455, 432, 1457, 434, 1459, 436, 1462, 438, 1464, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1139,1142,1145,1148,1150,1152,1154,1156,1159,648,1161,650,1163,652,1165,655,1168,658,1170,1172,661,1174,664,1176,666,1178,668,1180,1182,1184,673,1186,675,1188,677,1190,679,681,1193,683,1195,685,1197,687,1200,689,691,1203,693,1205,695,1207,697,1210,699,1212,701,703,1215,705,1218,707,1220,709,1222,711,1224,713,1226,715,1228,717,719,1231,721,1233,211,723,1235,212,213,725,214,1238,215,727,216,217,729,1241,218,219,731,1243,220,221,733,1245,222,223,735,1247,224,225,737,1249,226,227,739,1251,228,229,741,1253,230,231,743,1255,232,233,745,1257,1259,748,1261,750,1263,752,1265,755,1267,757,1269,759,1271,761,1273,763,1275,765,1277,767,1279,769,1281,1283,773,1285,775,1287,1289,779,1291,781,1293,783,1295,785,1297,1299,788,1301,790,1303,792,1305,794,1307,796,1309,798,1311,801,1313,803,1315,805,1317,807,1319,809,1321,811,1323,813,1325,815,1328,817,1330,819,308,821,1333,823,312,1336,825,314,827,1339,316,829,1341,318,831,1343,320,833,1345,322,835,1347,324,837,1349,326,839,1351,328,841,330,1354,843,332,845,1357,334,336,848,1360,338,850,1362,340,852,1364,342,854,1366,344,856,1368,346,858,1371,348,860,350,862,1374,352,864,1376,354,866,1378,356,868,1381,358,870,1383,360,872,1385,362,874,364,876,1388,366,878,1391,368,880,1393,370,1395,372,1397,374,1399,376,1401,378,380,1405,382,1407,384,1409,386,1411,388,1413,390,392,1416,394,1418,396,1420,398,1422,400,1425,402,404,1428,406,1430,408,1432,410,1435,412,1437,414,1439,416,1441,418,1443,420,1445,422,1447,424,1449,426,428,1453,430,1455,432,1457,434,1459,436,438,1462,440,1464,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1139, 1142, 1145, 1148, 1150, 1152, 1154, 1156, 1159, 648, 1161, 650, 1163, 652, 1165, 655, 1168, 658, 1170, 1172, 661, 1174, 664, 1176, 666, 1178, 668, 1180, 1182, 1184, 673, 1186, 675, 1188, 677, 1190, 679, 681, 1193, 683, 1195, 685, 1197, 687, 1200, 689, 691, 1203, 693, 1205, 695, 1207, 697, 1210, 699, 1212, 701, 703, 1215, 705, 1218, 707, 1220, 709, 1222, 711, 1224, 713, 1226, 715, 1228, 717, 719, 1231, 721, 1233, 211, 723, 1235, 212, 213, 725, 214, 1238, 215, 727, 216, 217, 729, 1241, 218, 219, 731, 1243, 220, 221, 733, 1245, 222, 223, 735, 1247, 224, 225, 737, 1249, 226, 227, 739, 1251, 228, 229, 741, 1253, 230, 231, 743, 1255, 232, 233, 745, 1257, 1259, 748, 1261, 750, 1263, 752, 1265, 755, 1267, 757, 1269, 759, 1271, 761, 1273, 763, 1275, 765, 1277, 767, 1279, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 779, 1291, 781, 1293, 783, 1295, 785, 1297, 1299, 788, 1301, 790, 1303, 792, 1305, 794, 1307, 796, 1309, 798, 1311, 801, 1313, 803, 1315, 805, 1317, 807, 1319, 809, 1321, 811, 1323, 813, 1325, 815, 1328, 817, 1330, 819, 308, 821, 1333, 823, 312, 1336, 825, 314, 827, 1339, 316, 829, 1341, 318, 831, 1343, 320, 833, 1345, 322, 835, 1347, 324, 837, 1349, 326, 839, 1351, 328, 841, 330, 1354, 843, 332, 845, 1357, 334, 336, 848, 1360, 338, 850, 1362, 340, 852, 1364, 342, 854, 1366, 344, 856, 1368, 346, 858, 1371, 348, 860, 350, 862, 1374, 352, 864, 1376, 354, 866, 1378, 356, 868, 1381, 358, 870, 1383, 360, 872, 1385, 362, 874, 364, 876, 1388, 366, 878, 1391, 368, 880, 1393, 370, 1395, 372, 1397, 374, 1399, 376, 1401, 378, 380, 1405, 382, 1407, 384, 1409, 386, 1411, 388, 1413, 390, 392, 1416, 394, 1418, 396, 1420, 398, 1422, 400, 1425, 402, 404, 1428, 406, 1430, 408, 1432, 410, 1435, 412, 1437, 414, 1439, 416, 1441, 418, 1443, 420, 1445, 422, 1447, 424, 1449, 426, 428, 1453, 430, 1455, 432, 1457, 434, 1459, 436, 438, 1462, 440, 1464, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","IL37","CXCL16","IFNL3","TGFBR1","IL17C","RACK1","PF4","CCL23","CCL21","IL17D","IL27","IFNA16","TGFBR2","ACTA2","IL1A","IFNA4","AGTR2","RAF1","AGTR1","CCL2","TGFB1","PTPN11","BDKRB1","F12","KNG1","IL1B","SMAD3","NOS3","CXCL12","NR3C2","JUND","BDKRB2","CXCL9","CYP11B2","IL11RA","IL6","IL11","MAS1","IL25","CYP11A1","IL36G","ATF6B","RRAS","CALML3","CALML3","CXCL8","CALML3","MAP2K6","CAMK1","IFNG","CAMK1","IFNA8","CAMK2A","CYP11A1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CCL7","CAMK2G","SMAD4","CAMK4","CREB3","MAPK1","CAMK2A","CCL11","CAMK2A","PDGFD","CAMK2B","SERPING1","CAMK2B","CXCL5","CREB3","CPN1","CREB3L1","OSM","ITPR3","CREB3L1","HIF1A","CREB3L3","CTGF","Overview of proinflammatory and profibrotic mediators","CREB3L3","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","CCL4","Angiotensin II receptor type 1 pathway","GNAQ","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","CCL18","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KLKB1","KE1743: Increased plasma Angiotensin II","KE1752: Increased Angiotensin II","ITPR3","IL10","NF-KB pathway","Oxidative stress","ATF2","IFNA5","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","IL3","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","CCL13","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CCL24","IFNA13","CREB3L4","CCL4L2","CREB5","IL33","CREB5","IL9","CALM2","IFNK","CALM3","IL21","CALML4","VEGFA","CALML4","IL22","CALML5","IL12B","CALML6","LIF","ITPR2","IL5","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","HSD3B1","IFNA1","HSD3B2","CNTF","HSD3B2","CCL15","STAR","IL36B","IFNW1","CYP21A2","IL36RN","HSD3B1","CXCL6","CAMK1D","IFNA17","CAMK1G","CXCL3","CAMK1G","IL1F10","STAR","IFNA14","CHUK","IFNA7","IKBKG","CSF2","IKBKB","IFNA10","NFKBIA","IFNB1","NFKB1","MMP1","RELA","IL20","REL","PPBP","NFKBIE","IL7","CYP1A1","CCL19","NQO1","COL1A1","FOS","CCL17","MAPK14","COL3A1","CCL20","CYBB","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","IL2","COL5A3","SOD1","CASP1","BMP1","NOX4","CCL22","P4HA1","SOD2","IL17F","COL11A2","HMOX1","EPO","COL11A1","GCLC","COL6A2","IFNA21","CAT","COL5A1","SP1","IL17A","PPIB","COL9A1","UGT1A6","IFNL1","CRTAP","MAOA","CCR2","ADAMTS2","GPX3","IFNA6","P4HA2","XDH","PTGER2","COL4A1","SOD3","CCL25","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","COL2A1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","CCL3","COL7A1","NOX1","MMP9","COL10A1","MGST1","EBI3","COL23A1","NFIX","COL26A1","TXN2","IL26","COL12A1","NOX5","IL19","COL13A1","NOX3","CD28","COL25A1","IFNL2","COL17A1","KLRD1","COL6A1","CCL16","COL15A1","CXCL10","COL14A1","COL16A1","CCL1","COL19A1","TNF","COL18A1","IL36A","P3H1","NLRP3","P3H2","IL24","COLGALT1","COL4A6","TSLP","COL9A3","PIK3CG","COL9A2","CCL8","CTSD","PTGER4","AGT","CXCL17","CMA1","CPB2","CXCL13","ACE2","IL18","REN","CCL26","ACE","IFNA2","CES1","IL4","CTSZ","IL13","MME","LTA","ANPEP","CCL14","CTSG","CCL3L3","GZMH","XCL2","ATP6AP2","IL17B","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","XCL1","COL4A5","IL31","PCOLCE","COL24A1","PF4V1","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P3H3","COLGALT2","P4HA3","COL6A6","COL6A5","COL20A1","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","CPB1","CPA3","ENPEP","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'IL37', 'CXCL16', 'IFNL3', 'TGFBR1', 'IL17C', 'RACK1', 'PF4', 'CCL23', 'CCL21', 'IL17D', 'IL27', 'IFNA16', 'TGFBR2', 'ACTA2', 'IL1A', 'IFNA4', 'AGTR2', 'RAF1', 'AGTR1', 'CCL2', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'KNG1', 'IL1B', 'SMAD3', 'NOS3', 'CXCL12', 'NR3C2', 'JUND', 'BDKRB2', 'CXCL9', 'CYP11B2', 'IL11RA', 'IL6', 'IL11', 'MAS1', 'IL25', 'CYP11A1', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CXCL8', 'CALML3', 'MAP2K6', 'CAMK1', 'IFNG', 'CAMK1', 'IFNA8', 'CAMK2A', 'CYP11A1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CCL7', 'CAMK2G', 'SMAD4', 'CAMK4', 'CREB3', 'MAPK1', 'CAMK2A', 'CCL11', 'CAMK2A', 'PDGFD', 'CAMK2B', 'SERPING1', 'CAMK2B', 'CXCL5', 'CREB3', 'CPN1', 'CREB3L1', 'OSM', 'ITPR3', 'CREB3L1', 'HIF1A', 'CREB3L3', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CREB3L3', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'CCL4', 'Angiotensin II receptor type 1 pathway', 'GNAQ', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'CCL18', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KLKB1', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'ITPR3', 'IL10', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'IFNA5', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'IL3', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'CCL13', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CCL24', 'IFNA13', 'CREB3L4', 'CCL4L2', 'CREB5', 'IL33', 'CREB5', 'IL9', 'CALM2', 'IFNK', 'CALM3', 'IL21', 'CALML4', 'VEGFA', 'CALML4', 'IL22', 'CALML5', 'IL12B', 'CALML6', 'LIF', 'ITPR2', 'IL5', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'HSD3B1', 'IFNA1', 'HSD3B2', 'CNTF', 'HSD3B2', 'CCL15', 'STAR', 'IL36B', 'IFNW1', 'CYP21A2', 'IL36RN', 'HSD3B1', 'CXCL6', 'CAMK1D', 'IFNA17', 'CAMK1G', 'CXCL3', 'CAMK1G', 'IL1F10', 'STAR', 'IFNA14', 'CHUK', 'IFNA7', 'IKBKG', 'CSF2', 'IKBKB', 'IFNA10', 'NFKBIA', 'IFNB1', 'NFKB1', 'MMP1', 'RELA', 'IL20', 'REL', 'PPBP', 'NFKBIE', 'IL7', 'CYP1A1', 'CCL19', 'NQO1', 'COL1A1', 'FOS', 'CCL17', 'MAPK14', 'COL3A1', 'CCL20', 'CYBB', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'IL2', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'NOX4', 'CCL22', 'P4HA1', 'SOD2', 'IL17F', 'COL11A2', 'HMOX1', 'EPO', 'COL11A1', 'GCLC', 'COL6A2', 'IFNA21', 'CAT', 'COL5A1', 'SP1', 'IL17A', 'PPIB', 'COL9A1', 'UGT1A6', 'IFNL1', 'CRTAP', 'MAOA', 'CCR2', 'ADAMTS2', 'GPX3', 'IFNA6', 'P4HA2', 'XDH', 'PTGER2', 'COL4A1', 'SOD3', 'CCL25', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'COL2A1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'CCL3', 'COL7A1', 'NOX1', 'MMP9', 'COL10A1', 'MGST1', 'EBI3', 'COL23A1', 'NFIX', 'COL26A1', 'TXN2', 'IL26', 'COL12A1', 'NOX5', 'IL19', 'COL13A1', 'NOX3', 'CD28', 'COL25A1', 'IFNL2', 'COL17A1', 'KLRD1', 'COL6A1', 'CCL16', 'COL15A1', 'CXCL10', 'COL14A1', 'COL16A1', 'CCL1', 'COL19A1', 'TNF', 'COL18A1', 'IL36A', 'P3H1', 'NLRP3', 'P3H2', 'IL24', 'COLGALT1', 'COL4A6', 'TSLP', 'COL9A3', 'PIK3CG', 'COL9A2', 'CCL8', 'CTSD', 'PTGER4', 'AGT', 'CXCL17', 'CMA1', 'CPB2', 'CXCL13', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'IFNA2', 'CES1', 'IL4', 'CTSZ', 'IL13', 'MME', 'LTA', 'ANPEP', 'CCL14', 'CTSG', 'CCL3L3', 'GZMH', 'XCL2', 'ATP6AP2', 'IL17B', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'XCL1', 'COL4A5', 'IL31', 'PCOLCE', 'COL24A1', 'PF4V1', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P3H3', 'COLGALT2', 'P4HA3', 'COL6A6', 'COL6A5', 'COL20A1', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'CPB1', 'CPA3', 'ENPEP', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1124     IL37
...       ...
470   PCOLCE2
472      CPB1
474      CPA3
476     ENPEP
478    C9orf3

[374 rows x 1 columns]
Returning 'get_selected_nodes': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'IL37', 'CXCL16', 'IFNL3', 'TGFBR1', 'IL17C', 'RACK1', 'PF4', 'CCL23', 'CCL21', 'IL17D', 'IL27', 'IFNA16', 'TGFBR2', 'ACTA2', 'IL1A', 'IFNA4', 'AGTR2', 'RAF1', 'AGTR1', 'CCL2', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'KNG1', 'SMAD3', 'NOS3', 'CXCL12', 'JUND', 'NR3C2', 'CXCL9', 'BDKRB2', 'IL11RA', 'CYP11B2', 'IL6', 'IL11', 'MAS1', 'IL25', 'CYP11A1', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CXCL8', 'CALML3', 'MAP2K6', 'CALML3', 'IFNG', 'CAMK1', 'CAMK1', 'IFNA8', 'CAMK2A', 'CCL5', 'CYP11A1', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2D', 'CAMK2G', 'CCL7', 'CAMK2G', 'SMAD4', 'CAMK4', 'MAPK1', 'CREB3', 'CAMK2A', 'CCL11', 'CAMK2A', 'PDGFD', 'CAMK2B', 'SERPING1', 'CAMK2B', 'CXCL5', 'CREB3', 'CPN1', 'CREB3L1', 'OSM', 'ITPR3', 'HIF1A', 'CREB3L1', 'CTGF', 'CREB3L3', 'CXCL2', 'CREB3L3', 'GNAQ', 'CCL4', 'GNAQ', 'CCL18', 'ITPR1', 'KLKB1', 'ITPR1', 'IL10', 'ITPR3', 'IFNA5', 'ATF2', 'CXCL14', 'ATF4', 'IL3', 'CALM1', 'CCL13', 'CREB1', 'CX3CL1', 'CREB3L2', 'CCL24', 'CREB3L2', 'IFNA13', 'CREB3L4', 'CCL4L2', 'CREB5', 'IL33', 'CREB5', 'IL9', 'IFNK', 'CALM2', 'IL21', 'CALM3', 'VEGFA', 'CALML4', 'IL22', 'CALML4', 'IL12B', 'CALML5', 'LIF', 'CALML6', 'IL5', 'ITPR2', 'IL15', 'ATF1', 'CSF3', 'CSF1', 'PLCB2', 'AREG', 'PLCB2', 'CTF1', 'IFNA1', 'HSD3B1', 'CNTF', 'HSD3B2', 'CCL15', 'HSD3B2', 'IL36B', 'STAR', 'IFNW1', 'CYP21A2', 'IL36RN', 'HSD3B1', 'CXCL6', 'CAMK1D', 'IFNA17', 'CAMK1G', 'CXCL3', 'CAMK1G', 'IL1F10', 'STAR', 'IFNA14', 'IFNA7', 'CHUK', 'CSF2', 'IKBKG', 'IFNA10', 'IKBKB', 'IFNB1', 'NFKBIA', 'MMP1', 'NFKB1', 'IL20', 'RELA', 'PPBP', 'REL', 'NFKBIE', 'IL7', 'CYP1A1', 'CCL19', 'NQO1', 'COL1A1', 'CCL17', 'FOS', 'MAPK14', 'CCL20', 'COL3A1', 'CYBB', 'COL1A2', 'TNFSF13B', 'NFE2L2', 'COL4A4', 'AHR', 'MAPK10', 'SERPINH1', 'IL2', 'GPX1', 'COL5A3', 'CASP1', 'SOD1', 'BMP1', 'CCL22', 'NOX4', 'P4HA1', 'IL17F', 'SOD2', 'COL11A2', 'EPO', 'HMOX1', 'COL11A1', 'GCLC', 'IFNA21', 'COL6A2', 'CAT', 'COL5A1', 'IL17A', 'SP1', 'PPIB', 'IFNL1', 'UGT1A6', 'COL9A1', 'CCR2', 'MAOA', 'CRTAP', 'IFNA6', 'GPX3', 'ADAMTS2', 'PTGER2', 'XDH', 'P4HA2', 'CCL25', 'SOD3', 'COL4A1', 'MT1X', 'COL5A2', 'CCL28', 'JUNB', 'P4HB', 'SPP1', 'TXNRD2', 'COL4A2', 'CXCL1', 'TXNRD1', 'COL2A1', 'IL23A', 'GSR', 'PLOD1', 'GSTT2', 'PLOD2', 'CCL3', 'NOX1', 'COL7A1', 'MMP9', 'MGST1', 'COL10A1', 'EBI3', 'NFIX', 'COL23A1', 'IL26', 'TXN2', 'COL26A1', 'NOX5', 'COL12A1', 'IL19', 'NOX3', 'COL13A1', 'CD28', 'COL25A1', 'IFNL2', 'COL17A1', 'KLRD1', 'COL6A1', 'CCL16', 'COL15A1', 'CXCL10', 'COL14A1', 'COL16A1', 'CCL1', 'COL19A1', 'TNF', 'COL18A1', 'IL36A', 'P3H1', 'NLRP3', 'P3H2', 'IL24', 'COLGALT1', 'TSLP', 'COL4A6', 'PIK3CG', 'COL9A3', 'CCL8', 'COL9A2', 'PTGER4', 'CTSD', 'AGT', 'CXCL17', 'CMA1', 'CXCL13', 'CPB2', 'IL18', 'ACE2', 'CCL26', 'REN', 'ACE', 'IFNA2', 'CES1', 'IL4', 'CTSZ', 'IL13', 'MME', 'LTA', 'ANPEP', 'CCL14', 'CTSG', 'CCL3L3', 'GZMH', 'XCL2', 'ATP6AP2', 'IL17B', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'XCL1', 'COL4A5', 'IL31', 'PCOLCE', 'PF4V1', 'COL24A1', 'CXCL11', 'COL8A2', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P3H3', 'COLGALT2', 'P4HA3', 'COL6A6', 'COL6A5', 'COL20A1', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'CPB1', 'CPA3', 'ENPEP', 'C9orf3']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'IL37', 'CXCL16', 'IFNL3', 'TGFBR1', 'IL17C', 'RACK1', 'PF4', 'CCL23', 'CCL21', 'IL17D', 'IL27', 'IFNA16', 'TGFBR2', 'ACTA2', 'IL1A', 'IFNA4', 'AGTR2', 'RAF1', 'AGTR1', 'CCL2', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'KNG1', 'SMAD3', 'NOS3', 'CXCL12', 'JUND', 'NR3C2', 'CXCL9', 'BDKRB2', 'IL11RA', 'CYP11B2', 'IL6', 'IL11', 'MAS1', 'IL25', 'CYP11A1', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CXCL8', 'CALML3', 'MAP2K6', 'CALML3', 'IFNG', 'CAMK1', 'CAMK1', 'IFNA8', 'CAMK2A', 'CCL5', 'CYP11A1', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2D', 'CAMK2G', 'CCL7', 'CAMK2G', 'SMAD4', 'CAMK4', 'MAPK1', 'CREB3', 'CAMK2A', 'CCL11', 'CAMK2A', 'PDGFD', 'CAMK2B', 'SERPING1', 'CAMK2B', 'CXCL5', 'CREB3', 'CPN1', 'CREB3L1', 'OSM', 'ITPR3', 'HIF1A', 'CREB3L1', 'CTGF', 'CREB3L3', 'CXCL2', 'CREB3L3', 'GNAQ', 'CCL4', 'GNAQ', 'CCL18', 'ITPR1', 'KLKB1', 'ITPR1', 'IL10', 'ITPR3', 'IFNA5', 'ATF2', 'CXCL14', 'ATF4', 'IL3', 'CALM1', 'CCL13', 'CREB1', 'CX3CL1', 'CREB3L2', 'CCL24', 'CREB3L2', 'IFNA13', 'CREB3L4', 'CCL4L2', 'CREB5', 'IL33', 'CREB5', 'IL9', 'IFNK', 'CALM2', 'IL21', 'CALM3', 'VEGFA', 'CALML4', 'IL22', 'CALML4', 'IL12B', 'CALML5', 'LIF', 'CALML6', 'IL5', 'ITPR2', 'IL15', 'ATF1', 'CSF3', 'CSF1', 'PLCB2', 'AREG', 'PLCB2', 'CTF1', 'IFNA1', 'HSD3B1', 'CNTF', 'HSD3B2', 'CCL15', 'HSD3B2', 'IL36B', 'STAR', 'IFNW1', 'CYP21A2', 'IL36RN', 'HSD3B1', 'CXCL6', 'CAMK1D', 'IFNA17', 'CAMK1G', 'CXCL3', 'CAMK1G', 'IL1F10', 'STAR', 'IFNA14', 'IFNA7', 'CHUK', 'CSF2', 'IKBKG', 'IFNA10', 'IKBKB', 'IFNB1', 'NFKBIA', 'MMP1', 'NFKB1', 'IL20', 'RELA', 'PPBP', 'REL', 'NFKBIE', 'IL7', 'CYP1A1', 'CCL19', 'NQO1', 'COL1A1', 'CCL17', 'FOS', 'MAPK14', 'CCL20', 'COL3A1', 'CYBB', 'COL1A2', 'TNFSF13B', 'NFE2L2', 'COL4A4', 'AHR', 'MAPK10', 'SERPINH1', 'IL2', 'GPX1', 'COL5A3', 'CASP1', 'SOD1', 'BMP1', 'CCL22', 'NOX4', 'P4HA1', 'IL17F', 'SOD2', 'COL11A2', 'EPO', 'HMOX1', 'COL11A1', 'GCLC', 'IFNA21', 'COL6A2', 'CAT', 'COL5A1', 'IL17A', 'SP1', 'PPIB', 'IFNL1', 'UGT1A6', 'COL9A1', 'CCR2', 'MAOA', 'CRTAP', 'IFNA6', 'GPX3', 'ADAMTS2', 'PTGER2', 'XDH', 'P4HA2', 'CCL25', 'SOD3', 'COL4A1', 'MT1X', 'COL5A2', 'CCL28', 'JUNB', 'P4HB', 'SPP1', 'TXNRD2', 'COL4A2', 'CXCL1', 'TXNRD1', 'COL2A1', 'IL23A', 'GSR', 'PLOD1', 'GSTT2', 'PLOD2', 'CCL3', 'NOX1', 'COL7A1', 'MMP9', 'MGST1', 'COL10A1', 'EBI3', 'NFIX', 'COL23A1', 'IL26', 'TXN2', 'COL26A1', 'NOX5', 'COL12A1', 'IL19', 'NOX3', 'COL13A1', 'CD28', 'COL25A1', 'IFNL2', 'COL17A1', 'KLRD1', 'COL6A1', 'CCL16', 'COL15A1', 'CXCL10', 'COL14A1', 'COL16A1', 'CCL1', 'COL19A1', 'TNF', 'COL18A1', 'IL36A', 'P3H1', 'NLRP3', 'P3H2', 'IL24', 'COLGALT1', 'TSLP', 'COL4A6', 'PIK3CG', 'COL9A3', 'CCL8', 'COL9A2', 'PTGER4', 'CTSD', 'AGT', 'CXCL17', 'CMA1', 'CXCL13', 'CPB2', 'IL18', 'ACE2', 'CCL26', 'REN', 'ACE', 'IFNA2', 'CES1', 'IL4', 'CTSZ', 'IL13', 'MME', 'LTA', 'ANPEP', 'CCL14', 'CTSG', 'CCL3L3', 'GZMH', 'XCL2', 'ATP6AP2', 'IL17B', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'XCL1', 'COL4A5', 'IL31', 'PCOLCE', 'PF4V1', 'COL24A1', 'CXCL11', 'COL8A2', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P3H3', 'COLGALT2', 'P4HA3', 'COL6A6', 'COL6A5', 'COL20A1', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'CPB1', 'CPA3', 'ENPEP', 'C9orf3'], 'edges': None}
--------------------
Calling create_composite_filter('final_filter', ['logFCfilter', 'CTLfilter'])
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling commands_post('filter get name="logFCfilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'logFCfilter'}
OK[200], content: {
 "data": [ {
  "name" : "logFCfilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "IS_NOT_BETWEEN",
        "criterion" : [ -2, 5 ],
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "logFC"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'logFCfilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'IS_NOT_BETWEEN', 'criterion': [-2, 5], 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'logFC'}}]}]}]
Calling commands_post('filter get name="CTLfilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'CTLfilter'}
OK[200], content: {
 "data": [ {
  "name" : "CTLfilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "IS",
        "criterion" : "gene",
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "CTL.Type"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'CTLfilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'IS', 'criterion': 'gene', 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'CTL.Type'}}]}]}]
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'final_filter', 'json': '{"id": "CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "IS_NOT_BETWEEN", "criterion": [-2, 5], "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "logFC"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "IS", "criterion": "gene", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "CTL.Type"}}]}]}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'final_filter', 'json': '{"id": "CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "IS_NOT_BETWEEN", "criterion": [-2, 5], "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "logFC"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "IS", "criterion": "gene", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "CTL.Type"}}]}]}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":374}
Returning 'cyrest_get': {'count': 374}
Returning 'get_node_count': 374
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":429}
Returning 'cyrest_get': {'count': 429}
Returning 'get_edge_count': 429
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [1124,1128,1134,1136,1139,1142,1145,1148,1150,1159,648,650,1163,658,1174,1178,668,673,1186,675,1193,1197,1200,689,691,1210,701,705,1218,707,709,711,1226,1228,721,723,1238,1241,1243,1245,1247,1251,1253,1257,1259,1261,1265,1267,1269,1273,1275,1279,1291,779,1293,781,1295,783,1297,1299,790,1305,794,796,1309,1311,1313,1317,1319,1323,1328,1330,1333,312,825,1343,835,1349,1351,328,1354,1357,1360,336,1362,1364,340,1366,1368,352,1381,870,360,1385,1388,364,878,880,1393,370,1395,1397,1399,376,378,1405,382,386,1411,388,1413,390,1418,394,1420,400,402,1428,404,1435,1437,1439,1441,1443,420,1445,422,1447,1449,1457,1459,1462,438,450,452,456,458,460,472,474,476]
Returning 'cyrest_get': [1124, 1128, 1134, 1136, 1139, 1142, 1145, 1148, 1150, 1159, 648, 650, 1163, 658, 1174, 1178, 668, 673, 1186, 675, 1193, 1197, 1200, 689, 691, 1210, 701, 705, 1218, 707, 709, 711, 1226, 1228, 721, 723, 1238, 1241, 1243, 1245, 1247, 1251, 1253, 1257, 1259, 1261, 1265, 1267, 1269, 1273, 1275, 1279, 1291, 779, 1293, 781, 1295, 783, 1297, 1299, 790, 1305, 794, 796, 1309, 1311, 1313, 1317, 1319, 1323, 1328, 1330, 1333, 312, 825, 1343, 835, 1349, 1351, 328, 1354, 1357, 1360, 336, 1362, 1364, 340, 1366, 1368, 352, 1381, 870, 360, 1385, 1388, 364, 878, 880, 1393, 370, 1395, 1397, 1399, 376, 378, 1405, 382, 386, 1411, 388, 1413, 390, 1418, 394, 1420, 400, 402, 1428, 404, 1435, 1437, 1439, 1441, 1443, 420, 1445, 422, 1447, 1449, 1457, 1459, 1462, 438, 450, 452, 456, 458, 460, 472, 474, 476]
Returning 'get_selected_node_count': 141
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [1124,1128,1134,1136,1139,1142,1145,1148,1150,1159,648,650,1163,658,1174,1178,668,673,1186,675,1193,1197,1200,689,691,1210,701,705,1218,707,709,711,1226,1228,721,723,1238,1241,1243,1245,1247,1251,1253,1257,1259,1261,1265,1267,1269,1273,1275,1279,1291,779,1293,781,1295,783,1297,1299,790,1305,794,796,1309,1311,1313,1317,1319,1323,1328,1330,1333,312,825,1343,835,1349,1351,328,1354,1357,1360,336,1362,1364,340,1366,1368,352,1381,870,360,1385,1388,364,878,880,1393,370,1395,1397,1399,376,378,1405,382,386,1411,388,1413,390,1418,394,1420,400,402,1428,404,1435,1437,1439,1441,1443,420,1445,422,1447,1449,1457,1459,1462,438,450,452,456,458,460,472,474,476]
Returning 'cyrest_get': [1124, 1128, 1134, 1136, 1139, 1142, 1145, 1148, 1150, 1159, 648, 650, 1163, 658, 1174, 1178, 668, 673, 1186, 675, 1193, 1197, 1200, 689, 691, 1210, 701, 705, 1218, 707, 709, 711, 1226, 1228, 721, 723, 1238, 1241, 1243, 1245, 1247, 1251, 1253, 1257, 1259, 1261, 1265, 1267, 1269, 1273, 1275, 1279, 1291, 779, 1293, 781, 1295, 783, 1297, 1299, 790, 1305, 794, 796, 1309, 1311, 1313, 1317, 1319, 1323, 1328, 1330, 1333, 312, 825, 1343, 835, 1349, 1351, 328, 1354, 1357, 1360, 336, 1362, 1364, 340, 1366, 1368, 352, 1381, 870, 360, 1385, 1388, 364, 878, 880, 1393, 370, 1395, 1397, 1399, 376, 378, 1405, 382, 386, 1411, 388, 1413, 390, 1418, 394, 1420, 400, 402, 1428, 404, 1435, 1437, 1439, 1441, 1443, 420, 1445, 422, 1447, 1449, 1457, 1459, 1462, 438, 450, 452, 456, 458, 460, 472, 474, 476]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1139,1142,1145,1148,1150,1152,1154,1156,1159,648,1161,650,1163,652,1165,655,1168,658,1170,1172,661,1174,664,1176,666,1178,668,1180,1182,1184,673,1186,675,1188,677,1190,679,681,1193,683,1195,685,1197,687,1200,689,691,1203,693,1205,695,1207,697,1210,699,1212,701,703,1215,705,1218,707,1220,709,1222,711,1224,713,1226,715,1228,717,719,1231,721,1233,211,723,1235,212,213,725,214,1238,215,727,216,217,729,1241,218,219,731,1243,220,221,733,1245,222,223,735,1247,224,225,737,1249,226,227,739,1251,228,229,741,1253,230,231,743,1255,232,233,745,1257,1259,748,1261,750,1263,752,1265,755,1267,757,1269,759,1271,761,1273,763,1275,765,1277,767,1279,769,1281,1283,773,1285,775,1287,1289,779,1291,781,1293,783,1295,785,1297,1299,788,1301,790,1303,792,1305,794,1307,796,1309,798,1311,801,1313,803,1315,805,1317,807,1319,809,1321,811,1323,813,1325,815,1328,817,1330,819,308,821,1333,823,312,1336,825,314,827,1339,316,829,1341,318,831,1343,320,833,1345,322,835,1347,324,837,1349,326,839,1351,328,841,330,1354,843,332,845,1357,334,336,848,1360,338,850,1362,340,852,1364,342,854,1366,344,856,1368,346,858,1371,348,860,350,862,1374,352,864,1376,354,866,1378,356,868,1381,358,870,1383,360,872,1385,362,874,364,876,1388,366,878,1391,368,880,1393,370,1395,372,1397,374,1399,376,1401,378,380,1405,382,1407,384,1409,386,1411,388,1413,390,392,1416,394,1418,396,1420,398,1422,400,1425,402,404,1428,406,1430,408,1432,410,1435,412,1437,414,1439,416,1441,418,1443,420,1445,422,1447,424,1449,426,428,1453,430,1455,432,1457,434,1459,436,438,1462,440,1464,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1139, 1142, 1145, 1148, 1150, 1152, 1154, 1156, 1159, 648, 1161, 650, 1163, 652, 1165, 655, 1168, 658, 1170, 1172, 661, 1174, 664, 1176, 666, 1178, 668, 1180, 1182, 1184, 673, 1186, 675, 1188, 677, 1190, 679, 681, 1193, 683, 1195, 685, 1197, 687, 1200, 689, 691, 1203, 693, 1205, 695, 1207, 697, 1210, 699, 1212, 701, 703, 1215, 705, 1218, 707, 1220, 709, 1222, 711, 1224, 713, 1226, 715, 1228, 717, 719, 1231, 721, 1233, 211, 723, 1235, 212, 213, 725, 214, 1238, 215, 727, 216, 217, 729, 1241, 218, 219, 731, 1243, 220, 221, 733, 1245, 222, 223, 735, 1247, 224, 225, 737, 1249, 226, 227, 739, 1251, 228, 229, 741, 1253, 230, 231, 743, 1255, 232, 233, 745, 1257, 1259, 748, 1261, 750, 1263, 752, 1265, 755, 1267, 757, 1269, 759, 1271, 761, 1273, 763, 1275, 765, 1277, 767, 1279, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 779, 1291, 781, 1293, 783, 1295, 785, 1297, 1299, 788, 1301, 790, 1303, 792, 1305, 794, 1307, 796, 1309, 798, 1311, 801, 1313, 803, 1315, 805, 1317, 807, 1319, 809, 1321, 811, 1323, 813, 1325, 815, 1328, 817, 1330, 819, 308, 821, 1333, 823, 312, 1336, 825, 314, 827, 1339, 316, 829, 1341, 318, 831, 1343, 320, 833, 1345, 322, 835, 1347, 324, 837, 1349, 326, 839, 1351, 328, 841, 330, 1354, 843, 332, 845, 1357, 334, 336, 848, 1360, 338, 850, 1362, 340, 852, 1364, 342, 854, 1366, 344, 856, 1368, 346, 858, 1371, 348, 860, 350, 862, 1374, 352, 864, 1376, 354, 866, 1378, 356, 868, 1381, 358, 870, 1383, 360, 872, 1385, 362, 874, 364, 876, 1388, 366, 878, 1391, 368, 880, 1393, 370, 1395, 372, 1397, 374, 1399, 376, 1401, 378, 380, 1405, 382, 1407, 384, 1409, 386, 1411, 388, 1413, 390, 392, 1416, 394, 1418, 396, 1420, 398, 1422, 400, 1425, 402, 404, 1428, 406, 1430, 408, 1432, 410, 1435, 412, 1437, 414, 1439, 416, 1441, 418, 1443, 420, 1445, 422, 1447, 424, 1449, 426, 428, 1453, 430, 1455, 432, 1457, 434, 1459, 436, 438, 1462, 440, 1464, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","IL37","CXCL16","IFNL3","TGFBR1","IL17C","RACK1","PF4","CCL23","CCL21","IL17D","IL27","IFNA16","TGFBR2","ACTA2","IL1A","IFNA4","AGTR2","RAF1","AGTR1","CCL2","TGFB1","PTPN11","BDKRB1","F12","KNG1","IL1B","SMAD3","NOS3","CXCL12","NR3C2","JUND","BDKRB2","CXCL9","CYP11B2","IL11RA","IL6","IL11","MAS1","IL25","CYP11A1","IL36G","ATF6B","RRAS","CALML3","CALML3","CXCL8","CALML3","MAP2K6","CAMK1","IFNG","CAMK1","IFNA8","CAMK2A","CYP11A1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CCL7","CAMK2G","SMAD4","CAMK4","CREB3","MAPK1","CAMK2A","CCL11","CAMK2A","PDGFD","CAMK2B","SERPING1","CAMK2B","CXCL5","CREB3","CPN1","CREB3L1","OSM","ITPR3","CREB3L1","HIF1A","CREB3L3","CTGF","Overview of proinflammatory and profibrotic mediators","CREB3L3","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","CCL4","Angiotensin II receptor type 1 pathway","GNAQ","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","CCL18","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KLKB1","KE1743: Increased plasma Angiotensin II","KE1752: Increased Angiotensin II","ITPR3","IL10","NF-KB pathway","Oxidative stress","ATF2","IFNA5","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","IL3","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","CCL13","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CCL24","IFNA13","CREB3L4","CCL4L2","CREB5","IL33","CREB5","IL9","CALM2","IFNK","CALM3","IL21","CALML4","VEGFA","CALML4","IL22","CALML5","IL12B","CALML6","LIF","ITPR2","IL5","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","HSD3B1","IFNA1","HSD3B2","CNTF","HSD3B2","CCL15","STAR","IL36B","IFNW1","CYP21A2","IL36RN","HSD3B1","CXCL6","CAMK1D","IFNA17","CAMK1G","CXCL3","CAMK1G","IL1F10","STAR","IFNA14","CHUK","IFNA7","IKBKG","CSF2","IKBKB","IFNA10","NFKBIA","IFNB1","NFKB1","MMP1","RELA","IL20","REL","PPBP","NFKBIE","IL7","CYP1A1","CCL19","NQO1","COL1A1","FOS","CCL17","MAPK14","COL3A1","CCL20","CYBB","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","IL2","COL5A3","SOD1","CASP1","BMP1","NOX4","CCL22","P4HA1","SOD2","IL17F","COL11A2","HMOX1","EPO","COL11A1","GCLC","COL6A2","IFNA21","CAT","COL5A1","SP1","IL17A","PPIB","COL9A1","UGT1A6","IFNL1","CRTAP","MAOA","CCR2","ADAMTS2","GPX3","IFNA6","P4HA2","XDH","PTGER2","COL4A1","SOD3","CCL25","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","COL2A1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","CCL3","COL7A1","NOX1","MMP9","COL10A1","MGST1","EBI3","COL23A1","NFIX","COL26A1","TXN2","IL26","COL12A1","NOX5","IL19","COL13A1","NOX3","CD28","COL25A1","IFNL2","COL17A1","KLRD1","COL6A1","CCL16","COL15A1","CXCL10","COL14A1","COL16A1","CCL1","COL19A1","TNF","COL18A1","IL36A","P3H1","NLRP3","P3H2","IL24","COLGALT1","COL4A6","TSLP","COL9A3","PIK3CG","COL9A2","CCL8","CTSD","PTGER4","AGT","CXCL17","CMA1","CPB2","CXCL13","ACE2","IL18","REN","CCL26","ACE","IFNA2","CES1","IL4","CTSZ","IL13","MME","LTA","ANPEP","CCL14","CTSG","CCL3L3","GZMH","XCL2","ATP6AP2","IL17B","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","XCL1","COL4A5","IL31","PCOLCE","COL24A1","PF4V1","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P3H3","COLGALT2","P4HA3","COL6A6","COL6A5","COL20A1","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","CPB1","CPA3","ENPEP","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'IL37', 'CXCL16', 'IFNL3', 'TGFBR1', 'IL17C', 'RACK1', 'PF4', 'CCL23', 'CCL21', 'IL17D', 'IL27', 'IFNA16', 'TGFBR2', 'ACTA2', 'IL1A', 'IFNA4', 'AGTR2', 'RAF1', 'AGTR1', 'CCL2', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'KNG1', 'IL1B', 'SMAD3', 'NOS3', 'CXCL12', 'NR3C2', 'JUND', 'BDKRB2', 'CXCL9', 'CYP11B2', 'IL11RA', 'IL6', 'IL11', 'MAS1', 'IL25', 'CYP11A1', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CXCL8', 'CALML3', 'MAP2K6', 'CAMK1', 'IFNG', 'CAMK1', 'IFNA8', 'CAMK2A', 'CYP11A1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CCL7', 'CAMK2G', 'SMAD4', 'CAMK4', 'CREB3', 'MAPK1', 'CAMK2A', 'CCL11', 'CAMK2A', 'PDGFD', 'CAMK2B', 'SERPING1', 'CAMK2B', 'CXCL5', 'CREB3', 'CPN1', 'CREB3L1', 'OSM', 'ITPR3', 'CREB3L1', 'HIF1A', 'CREB3L3', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CREB3L3', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'CCL4', 'Angiotensin II receptor type 1 pathway', 'GNAQ', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'CCL18', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KLKB1', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'ITPR3', 'IL10', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'IFNA5', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'IL3', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'CCL13', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CCL24', 'IFNA13', 'CREB3L4', 'CCL4L2', 'CREB5', 'IL33', 'CREB5', 'IL9', 'CALM2', 'IFNK', 'CALM3', 'IL21', 'CALML4', 'VEGFA', 'CALML4', 'IL22', 'CALML5', 'IL12B', 'CALML6', 'LIF', 'ITPR2', 'IL5', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'HSD3B1', 'IFNA1', 'HSD3B2', 'CNTF', 'HSD3B2', 'CCL15', 'STAR', 'IL36B', 'IFNW1', 'CYP21A2', 'IL36RN', 'HSD3B1', 'CXCL6', 'CAMK1D', 'IFNA17', 'CAMK1G', 'CXCL3', 'CAMK1G', 'IL1F10', 'STAR', 'IFNA14', 'CHUK', 'IFNA7', 'IKBKG', 'CSF2', 'IKBKB', 'IFNA10', 'NFKBIA', 'IFNB1', 'NFKB1', 'MMP1', 'RELA', 'IL20', 'REL', 'PPBP', 'NFKBIE', 'IL7', 'CYP1A1', 'CCL19', 'NQO1', 'COL1A1', 'FOS', 'CCL17', 'MAPK14', 'COL3A1', 'CCL20', 'CYBB', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'IL2', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'NOX4', 'CCL22', 'P4HA1', 'SOD2', 'IL17F', 'COL11A2', 'HMOX1', 'EPO', 'COL11A1', 'GCLC', 'COL6A2', 'IFNA21', 'CAT', 'COL5A1', 'SP1', 'IL17A', 'PPIB', 'COL9A1', 'UGT1A6', 'IFNL1', 'CRTAP', 'MAOA', 'CCR2', 'ADAMTS2', 'GPX3', 'IFNA6', 'P4HA2', 'XDH', 'PTGER2', 'COL4A1', 'SOD3', 'CCL25', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'COL2A1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'CCL3', 'COL7A1', 'NOX1', 'MMP9', 'COL10A1', 'MGST1', 'EBI3', 'COL23A1', 'NFIX', 'COL26A1', 'TXN2', 'IL26', 'COL12A1', 'NOX5', 'IL19', 'COL13A1', 'NOX3', 'CD28', 'COL25A1', 'IFNL2', 'COL17A1', 'KLRD1', 'COL6A1', 'CCL16', 'COL15A1', 'CXCL10', 'COL14A1', 'COL16A1', 'CCL1', 'COL19A1', 'TNF', 'COL18A1', 'IL36A', 'P3H1', 'NLRP3', 'P3H2', 'IL24', 'COLGALT1', 'COL4A6', 'TSLP', 'COL9A3', 'PIK3CG', 'COL9A2', 'CCL8', 'CTSD', 'PTGER4', 'AGT', 'CXCL17', 'CMA1', 'CPB2', 'CXCL13', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'IFNA2', 'CES1', 'IL4', 'CTSZ', 'IL13', 'MME', 'LTA', 'ANPEP', 'CCL14', 'CTSG', 'CCL3L3', 'GZMH', 'XCL2', 'ATP6AP2', 'IL17B', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'XCL1', 'COL4A5', 'IL31', 'PCOLCE', 'COL24A1', 'PF4V1', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P3H3', 'COLGALT2', 'P4HA3', 'COL6A6', 'COL6A5', 'COL20A1', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'CPB1', 'CPA3', 'ENPEP', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1124     IL37
...       ...
470   PCOLCE2
472      CPB1
474      CPA3
476     ENPEP
478    C9orf3

[374 rows x 1 columns]
Returning 'get_selected_nodes': ['IL37', 'IFNL3', 'RACK1', 'PF4', 'CCL23', 'CCL21', 'IL17D', 'IL27', 'IFNA16', 'IFNA4', 'AGTR2', 'AGTR1', 'CCL2', 'KNG1', 'CXCL12', 'CXCL9', 'CYP11B2', 'MAS1', 'IL25', 'CYP11A1', 'CXCL8', 'IFNG', 'IFNA8', 'CAMK2A', 'CYP11A1', 'CCL7', 'CAMK4', 'CAMK2A', 'CCL11', 'CAMK2A', 'CAMK2B', 'CAMK2B', 'CPN1', 'OSM', 'CREB3L3', 'CREB3L3', 'CCL4', 'CCL18', 'KLKB1', 'IL10', 'IFNA5', 'IL3', 'CCL13', 'CCL24', 'IFNA13', 'CCL4L2', 'IL9', 'IFNK', 'IL21', 'IL22', 'IL12B', 'IL5', 'IFNA1', 'HSD3B1', 'CNTF', 'HSD3B2', 'CCL15', 'HSD3B2', 'IL36B', 'IFNW1', 'HSD3B1', 'IFNA17', 'CAMK1G', 'CAMK1G', 'IL1F10', 'IFNA14', 'IFNA7', 'IFNA10', 'IFNB1', 'IL20', 'IL7', 'CCL19', 'CCL17', 'COL3A1', 'CYBB', 'IL2', 'NOX4', 'IL17F', 'EPO', 'COL11A1', 'IFNA21', 'IL17A', 'IFNL1', 'COL9A1', 'CCR2', 'IFNA6', 'ADAMTS2', 'PTGER2', 'CCL25', 'COL2A1', 'CCL3', 'NOX1', 'COL10A1', 'EBI3', 'IL26', 'COL26A1', 'NOX5', 'NOX3', 'CD28', 'COL25A1', 'IFNL2', 'KLRD1', 'CCL16', 'COL15A1', 'COL14A1', 'CCL1', 'COL19A1', 'P3H1', 'NLRP3', 'P3H2', 'IL24', 'COLGALT1', 'PIK3CG', 'COL9A3', 'CCL8', 'AGT', 'CMA1', 'CXCL13', 'CPB2', 'IFNA2', 'IL4', 'IL13', 'LTA', 'CCL14', 'CTSG', 'CCL3L3', 'GZMH', 'XCL2', 'IL17B', 'XCL1', 'IL31', 'PF4V1', 'COL24A1', 'P3H3', 'COLGALT2', 'COL6A6', 'COL6A5', 'COL20A1', 'CPB1', 'CPA3', 'ENPEP']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_composite_filter': {'nodes': ['IL37', 'IFNL3', 'RACK1', 'PF4', 'CCL23', 'CCL21', 'IL17D', 'IL27', 'IFNA16', 'IFNA4', 'AGTR2', 'AGTR1', 'CCL2', 'KNG1', 'CXCL12', 'CXCL9', 'CYP11B2', 'MAS1', 'IL25', 'CYP11A1', 'CXCL8', 'IFNG', 'IFNA8', 'CAMK2A', 'CYP11A1', 'CCL7', 'CAMK4', 'CAMK2A', 'CCL11', 'CAMK2A', 'CAMK2B', 'CAMK2B', 'CPN1', 'OSM', 'CREB3L3', 'CREB3L3', 'CCL4', 'CCL18', 'KLKB1', 'IL10', 'IFNA5', 'IL3', 'CCL13', 'CCL24', 'IFNA13', 'CCL4L2', 'IL9', 'IFNK', 'IL21', 'IL22', 'IL12B', 'IL5', 'IFNA1', 'HSD3B1', 'CNTF', 'HSD3B2', 'CCL15', 'HSD3B2', 'IL36B', 'IFNW1', 'HSD3B1', 'IFNA17', 'CAMK1G', 'CAMK1G', 'IL1F10', 'IFNA14', 'IFNA7', 'IFNA10', 'IFNB1', 'IL20', 'IL7', 'CCL19', 'CCL17', 'COL3A1', 'CYBB', 'IL2', 'NOX4', 'IL17F', 'EPO', 'COL11A1', 'IFNA21', 'IL17A', 'IFNL1', 'COL9A1', 'CCR2', 'IFNA6', 'ADAMTS2', 'PTGER2', 'CCL25', 'COL2A1', 'CCL3', 'NOX1', 'COL10A1', 'EBI3', 'IL26', 'COL26A1', 'NOX5', 'NOX3', 'CD28', 'COL25A1', 'IFNL2', 'KLRD1', 'CCL16', 'COL15A1', 'COL14A1', 'CCL1', 'COL19A1', 'P3H1', 'NLRP3', 'P3H2', 'IL24', 'COLGALT1', 'PIK3CG', 'COL9A3', 'CCL8', 'AGT', 'CMA1', 'CXCL13', 'CPB2', 'IFNA2', 'IL4', 'IL13', 'LTA', 'CCL14', 'CTSG', 'CCL3L3', 'GZMH', 'XCL2', 'IL17B', 'XCL1', 'IL31', 'PF4V1', 'COL24A1', 'P3H3', 'COLGALT2', 'COL6A6', 'COL6A5', 'COL20A1', 'CPB1', 'CPA3', 'ENPEP'], 'edges': None}
--------------------
Calling delete_selected_nodes()
Calling get_network_name(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks.names', {'column': 'suid', 'query': 201}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks.names), params: {'column': 'suid', 'query': 201}
OK[200], content: [{"name":"CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens","SUID":201}]
Returning 'cyrest_get': [{'name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens', 'SUID': 201}]
Returning 'get_network_name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'
Calling commands_post('network delete nodeList=selected network="CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/delete), json: {'nodeList': 'selected', 'network': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'}
OK[200], content: {
 "data": {"nodes":[
  1349,
  1297,
  781,
  779,
  1275,
  1245,
  1405,
  386,
  1142,
  360,
  1305,
  1351,
  336,
  1360,
  1267,
  1226,
  400,
  370,
  1439,
  352,
  1333,
  1273,
  1210,
  1163,
  1243,
  711,
  472,
  1437,
  404,
  1319,
  450,
  1128,
  1428,
  1139,
  1393,
  1259,
  456,
  1388,
  794,
  1145,
  1265,
  835,
  1261,
  1381,
  1399,
  1449,
  1299,
  328,
  1148,
  707,
  1247,
  880,
  438,
  1279,
  1174,
  1413,
  783,
  364,
  1395,
  1441,
  1328,
  1311,
  420,
  1368,
  1241,
  1435,
  1462,
  878,
  1134,
  340,
  1364,
  1218,
  378,
  1293,
  1418,
  1238,
  394,
  422,
  452,
  1200,
  1124,
  705,
  658,
  1357,
  1385,
  1445,
  312,
  1343,
  1291,
  1178,
  474,
  1159,
  1136,
  476,
  376,
  1150,
  1366,
  721,
  1443,
  691,
  825,
  870,
  1411,
  1354,
  673,
  460,
  390,
  689,
  382,
  1323,
  709,
  1457,
  1309,
  701,
  796,
  650,
  675,
  1330,
  1269,
  1447,
  668,
  723,
  402,
  1313,
  790,
  1197,
  648,
  1193,
  1459,
  1253,
  458,
  1362,
  1228,
  1317,
  1397,
  1257,
  1251,
  1420,
  1295,
  1186,
  388
], "edges":[
  754,
  1266,
  1268,
  1270,
  1274,
  1276,
  1280,
  771,
  772,
  780,
  1292,
  782,
  1294,
  784,
  1296,
  1298,
  787,
  1300,
  791,
  1306,
  795,
  797,
  1310,
  1312,
  800,
  1314,
  1318,
  1320,
  1324,
  1329,
  1331,
  1334,
  1335,
  313,
  826,
  1344,
  836,
  1350,
  1352,
  329,
  1353,
  1355,
  1356,
  1358,
  337,
  1361,
  1363,
  341,
  1365,
  1367,
  1369,
  1370,
  353,
  1125,
  1382,
  871,
  361,
  1129,
  1386,
  1387,
  1389,
  365,
  1390,
  879,
  1135,
  881,
  1137,
  1394,
  371,
  1140,
  1396,
  1398,
  1143,
  1144,
  1400,
  377,
  1146,
  379,
  1147,
  1404,
  1149,
  1406,
  1151,
  383,
  387,
  1412,
  389,
  1158,
  1414,
  391,
  1160,
  649,
  1419,
  395,
  651,
  1164,
  1421,
  657,
  401,
  659,
  403,
  660,
  405,
  1429,
  1175,
  1434,
  1179,
  1436,
  669,
  1438,
  1440,
  672,
  1442,
  674,
  1187,
  1444,
  676,
  421,
  1446,
  423,
  1192,
  1448,
  1450,
  1194,
  1198,
  1201,
  690,
  1458,
  692,
  1460,
  439,
  1463,
  1211,
  702,
  706,
  451,
  1219,
  708,
  453,
  710,
  712,
  457,
  1227,
  459,
  461,
  1229,
  722,
  724,
  1237,
  1239,
  473,
  1242,
  475,
  1244,
  477,
  1246,
  1248,
  1252,
  1254,
  1258,
  747,
  1260,
  1262
]},
 "errors":[]
}
Returning 'commands_post': {'nodes': [1349, 1297, 781, 779, 1275, 1245, 1405, 386, 1142, 360, 1305, 1351, 336, 1360, 1267, 1226, 400, 370, 1439, 352, 1333, 1273, 1210, 1163, 1243, 711, 472, 1437, 404, 1319, 450, 1128, 1428, 1139, 1393, 1259, 456, 1388, 794, 1145, 1265, 835, 1261, 1381, 1399, 1449, 1299, 328, 1148, 707, 1247, 880, 438, 1279, 1174, 1413, 783, 364, 1395, 1441, 1328, 1311, 420, 1368, 1241, 1435, 1462, 878, 1134, 340, 1364, 1218, 378, 1293, 1418, 1238, 394, 422, 452, 1200, 1124, 705, 658, 1357, 1385, 1445, 312, 1343, 1291, 1178, 474, 1159, 1136, 476, 376, 1150, 1366, 721, 1443, 691, 825, 870, 1411, 1354, 673, 460, 390, 689, 382, 1323, 709, 1457, 1309, 701, 796, 650, 675, 1330, 1269, 1447, 668, 723, 402, 1313, 790, 1197, 648, 1193, 1459, 1253, 458, 1362, 1228, 1317, 1397, 1257, 1251, 1420, 1295, 1186, 388], 'edges': [754, 1266, 1268, 1270, 1274, 1276, 1280, 771, 772, 780, 1292, 782, 1294, 784, 1296, 1298, 787, 1300, 791, 1306, 795, 797, 1310, 1312, 800, 1314, 1318, 1320, 1324, 1329, 1331, 1334, 1335, 313, 826, 1344, 836, 1350, 1352, 329, 1353, 1355, 1356, 1358, 337, 1361, 1363, 341, 1365, 1367, 1369, 1370, 353, 1125, 1382, 871, 361, 1129, 1386, 1387, 1389, 365, 1390, 879, 1135, 881, 1137, 1394, 371, 1140, 1396, 1398, 1143, 1144, 1400, 377, 1146, 379, 1147, 1404, 1149, 1406, 1151, 383, 387, 1412, 389, 1158, 1414, 391, 1160, 649, 1419, 395, 651, 1164, 1421, 657, 401, 659, 403, 660, 405, 1429, 1175, 1434, 1179, 1436, 669, 1438, 1440, 672, 1442, 674, 1187, 1444, 676, 421, 1446, 423, 1192, 1448, 1450, 1194, 1198, 1201, 690, 1458, 692, 1460, 439, 1463, 1211, 702, 706, 451, 1219, 708, 453, 710, 712, 457, 1227, 459, 461, 1229, 722, 724, 1237, 1239, 473, 1242, 475, 1244, 477, 1246, 1248, 1252, 1254, 1258, 747, 1260, 1262]}
Returning 'delete_selected_nodes': {'nodes': [1349, 1297, 781, 779, 1275, 1245, 1405, 386, 1142, 360, 1305, 1351, 336, 1360, 1267, 1226, 400, 370, 1439, 352, 1333, 1273, 1210, 1163, 1243, 711, 472, 1437, 404, 1319, 450, 1128, 1428, 1139, 1393, 1259, 456, 1388, 794, 1145, 1265, 835, 1261, 1381, 1399, 1449, 1299, 328, 1148, 707, 1247, 880, 438, 1279, 1174, 1413, 783, 364, 1395, 1441, 1328, 1311, 420, 1368, 1241, 1435, 1462, 878, 1134, 340, 1364, 1218, 378, 1293, 1418, 1238, 394, 422, 452, 1200, 1124, 705, 658, 1357, 1385, 1445, 312, 1343, 1291, 1178, 474, 1159, 1136, 476, 376, 1150, 1366, 721, 1443, 691, 825, 870, 1411, 1354, 673, 460, 390, 689, 382, 1323, 709, 1457, 1309, 701, 796, 650, 675, 1330, 1269, 1447, 668, 723, 402, 1313, 790, 1197, 648, 1193, 1459, 1253, 458, 1362, 1228, 1317, 1397, 1257, 1251, 1420, 1295, 1186, 388], 'edges': [754, 1266, 1268, 1270, 1274, 1276, 1280, 771, 772, 780, 1292, 782, 1294, 784, 1296, 1298, 787, 1300, 791, 1306, 795, 797, 1310, 1312, 800, 1314, 1318, 1320, 1324, 1329, 1331, 1334, 1335, 313, 826, 1344, 836, 1350, 1352, 329, 1353, 1355, 1356, 1358, 337, 1361, 1363, 341, 1365, 1367, 1369, 1370, 353, 1125, 1382, 871, 361, 1129, 1386, 1387, 1389, 365, 1390, 879, 1135, 881, 1137, 1394, 371, 1140, 1396, 1398, 1143, 1144, 1400, 377, 1146, 379, 1147, 1404, 1149, 1406, 1151, 383, 387, 1412, 389, 1158, 1414, 391, 1160, 649, 1419, 395, 651, 1164, 1421, 657, 401, 659, 403, 660, 405, 1429, 1175, 1434, 1179, 1436, 669, 1438, 1440, 672, 1442, 674, 1187, 1444, 676, 421, 1446, 423, 1192, 1448, 1450, 1194, 1198, 1201, 690, 1458, 692, 1460, 439, 1463, 1211, 702, 706, 451, 1219, 708, 453, 710, 712, 457, 1227, 459, 461, 1229, 722, 724, 1237, 1239, 473, 1242, 475, 1244, 477, 1246, 1248, 1252, 1254, 1258, 747, 1260, 1262]}
--------------------
Calling layout_network()
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('layout apply preferred networkSelected="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/layout/apply%20preferred), json: {'networkSelected': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'layout_network': {}
--------------------
Calling export_image(filename='delnode_net_viz.png')
Calling get_network_view_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_views(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/views', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/views)
OK[200], content: [259]
Returning 'cyrest_get': [259]
Returning 'get_network_views': [259]
Returning 'get_network_view_suid': 259
Calling sandbox_get_file_info('delnode_net_viz.png', base_url='http://127.0.0.1:1234/v1')
Calling commands_post('filetransfer getFileInfo sandboxName="default_sandbox" fileName="delnode_net_viz.png"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filetransfer/getFileInfo), json: {'sandboxName': 'default_sandbox', 'fileName': 'delnode_net_viz.png'}
OK[200], content: {
 "data": {"filePath":"C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png","modifiedTime":"","isFile":false},
 "errors":[]
}
Returning 'commands_post': {'filePath': 'C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png', 'modifiedTime': '', 'isFile': False}
Returning 'sandbox_get_file_info': {'filePath': 'C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png', 'modifiedTime': '', 'isFile': False}
Calling commands_post('view export OutputFile="C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png" options="PNG" view="SUID:259"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/view/export), json: {'OutputFile': 'C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png', 'options': 'PNG', 'view': 'SUID:259'}
OK[200], content: {
 "data": {"file":"C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png"},
 "errors":[]
}
Returning 'commands_post': {'file': 'C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png'}
Returning 'export_image': {'file': 'C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png'}
--------------------
Calling sandbox_get_from('delnode_net_viz.png')
Calling commands_post('filetransfer fromSandbox sandboxName="default_sandbox" fileName="delnode_net_viz.png"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filetransfer/fromSandbox), json: {'sandboxName': 'default_sandbox', 'fileName': 'delnode_net_viz.png'}
OK[200], content: {
 "data": {"filePath":"C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png","modifiedTime":"2021-06-10 12:41:59.0573","fileByteCount":52551,"fileBase64":""},
 "errors":[]
}
Returning 'commands_post': {'filePath': 'C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png', 'modifiedTime': '2021-06-10 12:41:59.0573', 'fileByteCount': 52551, 'fileBase64': ''}
Returning 'sandbox_get_from': {'filePath': 'C:\\Users\\Aria Jadhav\\CytoscapeConfiguration\\filetransfer\\default_sandbox\\delnode_net_viz.png', 'modifiedTime': '2021-06-10 12:41:59.0573', 'fileByteCount': 52551}
--------------------
Calling create_column_filter('AngioFilter', 'name', 'Angiotensin', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Returning 'get_selected_node_count': 6
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,215,727,216,217,729,218,219,731,220,221,733,222,223,735,224,225,737,1249,226,227,739,228,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 215, 727, 216, 217, 729, 218, 219, 731, 220, 221, 733, 222, 223, 735, 224, 225, 737, 1249, 226, 227, 739, 228, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","Angiotensin II receptor type 1 pathway","GNAQ","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KE1743: Increased plasma Angiotensin II","KE1752: Increased Angiotensin II","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'Angiotensin II receptor type 1 pathway', 'GNAQ', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[233 rows x 1 columns]
Returning 'get_selected_nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins'], 'edges': None}
--------------------
Calling create_column_filter('ROSFilter', 'name', 'Reactive', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Reactive", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Reactive", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [227]
Returning 'cyrest_get': [227]
Returning 'get_selected_node_count': 1
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [227]
Returning 'cyrest_get': [227]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,215,727,216,217,729,218,219,731,220,221,733,222,223,735,224,225,737,1249,226,227,739,228,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 215, 727, 216, 217, 729, 218, 219, 731, 220, 221, 733, 222, 223, 735, 224, 225, 737, 1249, 226, 227, 739, 228, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","Angiotensin II receptor type 1 pathway","GNAQ","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KE1743: Increased plasma Angiotensin II","KE1752: Increased Angiotensin II","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'Angiotensin II receptor type 1 pathway', 'GNAQ', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[233 rows x 1 columns]
Returning 'get_selected_nodes': ['Increased, Reactive oxygen species']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Increased, Reactive oxygen species'], 'edges': None}
--------------------
Calling create_column_filter('NFkBFilter', 'name', 'Nuclear', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'NFkBFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Nuclear", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'NFkBFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Nuclear", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [229]
Returning 'cyrest_get': [229]
Returning 'get_selected_node_count': 1
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [229]
Returning 'cyrest_get': [229]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,215,727,216,217,729,218,219,731,220,221,733,222,223,735,224,225,737,1249,226,227,739,228,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 215, 727, 216, 217, 729, 218, 219, 731, 220, 221, 733, 222, 223, 735, 224, 225, 737, 1249, 226, 227, 739, 228, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","Angiotensin II receptor type 1 pathway","GNAQ","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KE1743: Increased plasma Angiotensin II","KE1752: Increased Angiotensin II","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'Angiotensin II receptor type 1 pathway', 'GNAQ', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[233 rows x 1 columns]
Returning 'get_selected_nodes': ['Increase activation, Nuclear factor kappa B (NF-kB)']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Increase activation, Nuclear factor kappa B (NF-kB)'], 'edges': None}
--------------------
Calling create_composite_filter('KE_filter', ['AngioFilter', 'ROSFilter', 'NFkBFilter'])
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling commands_post('filter get name="AngioFilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'AngioFilter'}
OK[200], content: {
 "data": [ {
  "name" : "AngioFilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "CONTAINS",
        "criterion" : "Angiotensin",
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "name"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'AngioFilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'CONTAINS', 'criterion': 'Angiotensin', 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'name'}}]}]}]
Calling commands_post('filter get name="ROSFilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'ROSFilter'}
OK[200], content: {
 "data": [ {
  "name" : "ROSFilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "CONTAINS",
        "criterion" : "Reactive",
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "name"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'ROSFilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'CONTAINS', 'criterion': 'Reactive', 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'name'}}]}]}]
Calling commands_post('filter get name="NFkBFilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'NFkBFilter'}
OK[200], content: {
 "data": [ {
  "name" : "NFkBFilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "CONTAINS",
        "criterion" : "Nuclear",
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "name"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'NFkBFilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'CONTAINS', 'criterion': 'Nuclear', 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'name'}}]}]}]
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'KE_filter', 'json': '{"id": "CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Angiotensin", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Reactive", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Nuclear", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}]}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'KE_filter', 'json': '{"id": "CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Angiotensin", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Reactive", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Nuclear", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}]}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_node_count': 0
Returning 'get_selected_nodes': None
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_composite_filter': {'nodes': None, 'edges': None}
--------------------
Calling create_composite_filter('KE_filter', ['AngioFilter', 'ROSFilter', 'NFkBFilter'])
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling commands_post('filter get name="AngioFilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'AngioFilter'}
OK[200], content: {
 "data": [ {
  "name" : "AngioFilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "CONTAINS",
        "criterion" : "Angiotensin",
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "name"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'AngioFilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'CONTAINS', 'criterion': 'Angiotensin', 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'name'}}]}]}]
Calling commands_post('filter get name="ROSFilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'ROSFilter'}
OK[200], content: {
 "data": [ {
  "name" : "ROSFilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "CONTAINS",
        "criterion" : "Reactive",
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "name"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'ROSFilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'CONTAINS', 'criterion': 'Reactive', 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'name'}}]}]}]
Calling commands_post('filter get name="NFkBFilter"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/get), json: {'name': 'NFkBFilter'}
OK[200], content: {
 "data": [ {
  "name" : "NFkBFilter",
  "transformers" : [ {
    "id" : "org.cytoscape.CompositeFilter",
    "parameters" : {
      "type" : "ALL"
    },
    "transformers" : [ {
      "id" : "org.cytoscape.ColumnFilter",
      "parameters" : {
        "predicate" : "CONTAINS",
        "criterion" : "Nuclear",
        "caseSensitive" : false,
        "type" : "nodes",
        "anyMatch" : true,
        "columnName" : "name"
      }
    } ]
  } ]
} ],
 "errors":[]
}
Returning 'commands_post': [{'name': 'NFkBFilter', 'transformers': [{'id': 'org.cytoscape.CompositeFilter', 'parameters': {'type': 'ALL'}, 'transformers': [{'id': 'org.cytoscape.ColumnFilter', 'parameters': {'predicate': 'CONTAINS', 'criterion': 'Nuclear', 'caseSensitive': False, 'type': 'nodes', 'anyMatch': True, 'columnName': 'name'}}]}]}]
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'KE_filter', 'json': '{"id": "CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Angiotensin", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Reactive", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Nuclear", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}]}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'KE_filter', 'json': '{"id": "CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Angiotensin", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Reactive", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}, {"id": "org.cytoscape.CompositeFilter", "parameters": {"type": "ALL"}, "transformers": [{"id": "org.cytoscape.ColumnFilter", "parameters": {"predicate": "CONTAINS", "criterion": "Nuclear", "caseSensitive": false, "type": "nodes", "anyMatch": true, "columnName": "name"}}]}]}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_node_count': 0
Returning 'get_selected_nodes': None
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_composite_filter': {'nodes': None, 'edges': None}
--------------------
Calling create_column_filter('AngioFilter', 'name', 'Angiotensin', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Returning 'get_selected_node_count': 6
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,215,727,216,217,729,218,219,731,220,221,733,222,223,735,224,225,737,1249,226,227,739,228,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 215, 727, 216, 217, 729, 218, 219, 731, 220, 221, 733, 222, 223, 735, 224, 225, 737, 1249, 226, 227, 739, 228, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","Angiotensin II receptor type 1 pathway","GNAQ","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KE1743: Increased plasma Angiotensin II","KE1752: Increased Angiotensin II","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'Angiotensin II receptor type 1 pathway', 'GNAQ', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[233 rows x 1 columns]
Returning 'get_selected_nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins'], 'edges': None}
--------------------
Calling delete_selected_nodes()
Calling get_network_name(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks.names', {'column': 'suid', 'query': 201}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks.names), params: {'column': 'suid', 'query': 201}
OK[200], content: [{"name":"CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens","SUID":201}]
Returning 'cyrest_get': [{'name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens', 'SUID': 201}]
Returning 'get_network_name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'
Calling commands_post('network delete nodeList=selected network="CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/delete), json: {'nodeList': 'selected', 'network': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'}
OK[200], content: {
 "data": {"nodes":[
  228,
  215,
  226,
  216,
  220,
  221
], "edges":[
  751,
  240,
  753,
  241,
  1138,
  242,
  243,
  756,
  1141,
  758,
  247,
  760,
  762,
  764,
  766,
  768,
  1153,
  770,
  1155,
  774,
  776,
  777,
  1162,
  778,
  1166,
  399,
  1169,
  786,
  1173,
  789,
  407,
  409,
  1177,
  793,
  411,
  413,
  1181,
  415,
  799,
  417,
  1185,
  419,
  678,
  1191,
  680,
  425,
  682,
  1196,
  684,
  686,
  1199,
  688,
  1202,
  1206,
  694,
  696,
  1209,
  698,
  700,
  1213,
  1216,
  704,
  1221,
  714,
  716,
  718,
  1232,
  720,
  1234,
  726,
  728,
  730,
  732,
  734,
  479,
  736,
  738,
  740,
  742,
  744,
  746,
  1131,
  235,
  236,
  749,
  237
]},
 "errors":[]
}
Returning 'commands_post': {'nodes': [228, 215, 226, 216, 220, 221], 'edges': [751, 240, 753, 241, 1138, 242, 243, 756, 1141, 758, 247, 760, 762, 764, 766, 768, 1153, 770, 1155, 774, 776, 777, 1162, 778, 1166, 399, 1169, 786, 1173, 789, 407, 409, 1177, 793, 411, 413, 1181, 415, 799, 417, 1185, 419, 678, 1191, 680, 425, 682, 1196, 684, 686, 1199, 688, 1202, 1206, 694, 696, 1209, 698, 700, 1213, 1216, 704, 1221, 714, 716, 718, 1232, 720, 1234, 726, 728, 730, 732, 734, 479, 736, 738, 740, 742, 744, 746, 1131, 235, 236, 749, 237]}
Returning 'delete_selected_nodes': {'nodes': [228, 215, 226, 216, 220, 221], 'edges': [751, 240, 753, 241, 1138, 242, 243, 756, 1141, 758, 247, 760, 762, 764, 766, 768, 1153, 770, 1155, 774, 776, 777, 1162, 778, 1166, 399, 1169, 786, 1173, 789, 407, 409, 1177, 793, 411, 413, 1181, 415, 799, 417, 1185, 419, 678, 1191, 680, 425, 682, 1196, 684, 686, 1199, 688, 1202, 1206, 694, 696, 1209, 698, 700, 1213, 1216, 704, 1221, 714, 716, 718, 1232, 720, 1234, 726, 728, 730, 732, 734, 479, 736, 738, 740, 742, 744, 746, 1131, 235, 236, 749, 237]}
--------------------
Calling create_column_filter('AngioFilter', 'name', 'Angiotensin', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Returning 'get_selected_node_count': 6
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,727,215,216,217,729,218,219,731,220,733,221,222,223,735,224,225,737,1249,226,227,739,228,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 727, 215, 216, 217, 729, 218, 219, 731, 220, 733, 221, 222, 223, 735, 224, 225, 737, 1249, 226, 227, 739, 228, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","GNAQ","Angiotensin II receptor type 1 pathway","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KE1743: Increased plasma Angiotensin II","ITPR3","KE1752: Increased Angiotensin II","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'GNAQ', 'Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KE1743: Increased plasma Angiotensin II', 'ITPR3', 'KE1752: Increased Angiotensin II', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[233 rows x 1 columns]
Returning 'get_selected_nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins'], 'edges': None}
--------------------
Calling create_column_filter('AngioFilter', 'name', 'Angiotensin', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":233}
Returning 'cyrest_get': {'count': 233}
Returning 'get_node_count': 233
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":266}
Returning 'cyrest_get': {'count': 266}
Returning 'get_edge_count': 266
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Returning 'get_selected_node_count': 6
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [215,216,220,221,226,228]
Returning 'cyrest_get': [215, 216, 220, 221, 226, 228]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,727,215,216,217,729,218,219,731,220,733,221,222,223,735,224,225,737,1249,226,227,739,228,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 727, 215, 216, 217, 729, 218, 219, 731, 220, 733, 221, 222, 223, 735, 224, 225, 737, 1249, 226, 227, 739, 228, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","GNAQ","Angiotensin II receptor type 1 pathway","Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","KE1743: Increased plasma Angiotensin II","ITPR3","KE1752: Increased Angiotensin II","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Renin Angiotensin Aldosterone System","Increased, Reactive oxygen species","CALM1","Metabolism of Angiotensinogen to Angiotensins","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'GNAQ', 'Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'KE1743: Increased plasma Angiotensin II', 'ITPR3', 'KE1752: Increased Angiotensin II', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Renin Angiotensin Aldosterone System', 'Increased, Reactive oxygen species', 'CALM1', 'Metabolism of Angiotensinogen to Angiotensins', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[233 rows x 1 columns]
Returning 'get_selected_nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Angiotensin II receptor type 1 pathway', 'Binding of agonist, Angiotensin II receptor type 1 receptor (AT1R)', 'KE1743: Increased plasma Angiotensin II', 'KE1752: Increased Angiotensin II', 'Renin Angiotensin Aldosterone System', 'Metabolism of Angiotensinogen to Angiotensins'], 'edges': None}
--------------------
Calling delete_selected_nodes()
Calling get_network_name(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks.names', {'column': 'suid', 'query': 201}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks.names), params: {'column': 'suid', 'query': 201}
OK[200], content: [{"name":"CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens","SUID":201}]
Returning 'cyrest_get': [{'name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens', 'SUID': 201}]
Returning 'get_network_name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'
Calling commands_post('network delete nodeList=selected network="CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/delete), json: {'nodeList': 'selected', 'network': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'}
OK[200], content: {
 "data": {"nodes":[
  228,
  215,
  226,
  216,
  220,
  221
], "edges":[
  751,
  240,
  753,
  241,
  1138,
  242,
  243,
  756,
  1141,
  758,
  247,
  760,
  762,
  764,
  766,
  768,
  1153,
  770,
  1155,
  774,
  776,
  777,
  1162,
  778,
  1166,
  399,
  1169,
  786,
  1173,
  789,
  407,
  409,
  1177,
  793,
  411,
  413,
  1181,
  415,
  799,
  417,
  1185,
  419,
  678,
  1191,
  680,
  425,
  682,
  1196,
  684,
  686,
  1199,
  688,
  1202,
  1206,
  694,
  696,
  1209,
  698,
  700,
  1213,
  1216,
  704,
  1221,
  714,
  716,
  718,
  1232,
  720,
  1234,
  726,
  728,
  730,
  732,
  734,
  479,
  736,
  738,
  740,
  742,
  744,
  746,
  1131,
  235,
  236,
  749,
  237
]},
 "errors":[]
}
Returning 'commands_post': {'nodes': [228, 215, 226, 216, 220, 221], 'edges': [751, 240, 753, 241, 1138, 242, 243, 756, 1141, 758, 247, 760, 762, 764, 766, 768, 1153, 770, 1155, 774, 776, 777, 1162, 778, 1166, 399, 1169, 786, 1173, 789, 407, 409, 1177, 793, 411, 413, 1181, 415, 799, 417, 1185, 419, 678, 1191, 680, 425, 682, 1196, 684, 686, 1199, 688, 1202, 1206, 694, 696, 1209, 698, 700, 1213, 1216, 704, 1221, 714, 716, 718, 1232, 720, 1234, 726, 728, 730, 732, 734, 479, 736, 738, 740, 742, 744, 746, 1131, 235, 236, 749, 237]}
Returning 'delete_selected_nodes': {'nodes': [228, 215, 226, 216, 220, 221], 'edges': [751, 240, 753, 241, 1138, 242, 243, 756, 1141, 758, 247, 760, 762, 764, 766, 768, 1153, 770, 1155, 774, 776, 777, 1162, 778, 1166, 399, 1169, 786, 1173, 789, 407, 409, 1177, 793, 411, 413, 1181, 415, 799, 417, 1185, 419, 678, 1191, 680, 425, 682, 1196, 684, 686, 1199, 688, 1202, 1206, 694, 696, 1209, 698, 700, 1213, 1216, 704, 1221, 714, 716, 718, 1232, 720, 1234, 726, 728, 730, 732, 734, 479, 736, 738, 740, 742, 744, 746, 1131, 235, 236, 749, 237]}
--------------------
Calling create_column_filter('ROSFilter', 'name', 'Reactive', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Reactive", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Reactive", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":227}
Returning 'cyrest_get': {'count': 227}
Returning 'get_node_count': 227
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":180}
Returning 'cyrest_get': {'count': 180}
Returning 'get_edge_count': 180
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [227]
Returning 'cyrest_get': [227]
Returning 'get_selected_node_count': 1
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [227]
Returning 'cyrest_get': [227]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,727,217,729,218,219,731,733,222,223,735,224,225,737,1249,227,739,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 727, 217, 729, 218, 219, 731, 733, 222, 223, 735, 224, 225, 737, 1249, 227, 739, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","GNAQ","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","Increased, Reactive oxygen species","CALM1","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'GNAQ', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'Increased, Reactive oxygen species', 'CALM1', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[227 rows x 1 columns]
Returning 'get_selected_nodes': ['Increased, Reactive oxygen species']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Increased, Reactive oxygen species'], 'edges': None}
--------------------
Calling delete_selected_nodes()
Calling get_network_name(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks.names', {'column': 'suid', 'query': 201}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks.names), params: {'column': 'suid', 'query': 201}
OK[200], content: [{"name":"CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens","SUID":201}]
Returning 'cyrest_get': [{'name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens', 'SUID': 201}]
Returning 'get_network_name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'
Calling commands_post('network delete nodeList=selected network="CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/delete), json: {'nodeList': 'selected', 'network': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'}
OK[200], content: {
 "data": {"nodes":[
  227
], "edges":[
  245,
  251
]},
 "errors":[]
}
Returning 'commands_post': {'nodes': [227], 'edges': [245, 251]}
Returning 'delete_selected_nodes': {'nodes': [227], 'edges': [245, 251]}
--------------------
Calling create_column_filter('NFkBFilter', 'name', 'Nuclear', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'NFkBFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Nuclear", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'NFkBFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Nuclear", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":226}
Returning 'cyrest_get': {'count': 226}
Returning 'get_node_count': 226
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":178}
Returning 'cyrest_get': {'count': 178}
Returning 'get_edge_count': 178
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [229]
Returning 'cyrest_get': [229]
Returning 'get_selected_node_count': 1
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [229]
Returning 'cyrest_get': [229]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,727,217,729,218,219,731,733,222,223,735,224,225,737,1249,739,229,741,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 727, 217, 729, 218, 219, 731, 733, 222, 223, 735, 224, 225, 737, 1249, 739, 229, 741, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","GNAQ","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","CALM1","Increase activation, Nuclear factor kappa B (NF-kB)","CREB1","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'GNAQ', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'CALM1', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'CREB1', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[226 rows x 1 columns]
Returning 'get_selected_nodes': ['Increase activation, Nuclear factor kappa B (NF-kB)']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Increase activation, Nuclear factor kappa B (NF-kB)'], 'edges': None}
--------------------
Calling delete_selected_nodes()
Calling get_network_name(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks.names', {'column': 'suid', 'query': 201}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks.names), params: {'column': 'suid', 'query': 201}
OK[200], content: [{"name":"CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens","SUID":201}]
Returning 'cyrest_get': [{'name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens', 'SUID': 201}]
Returning 'get_network_name': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'
Calling commands_post('network delete nodeList=selected network="CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/delete), json: {'nodeList': 'selected', 'network': 'CTL_ACE2 inhibition leads to pulmonary fibrosis - Homo sapiens'}
OK[200], content: {
 "data": {"nodes":[
  229
], "edges":[
  244,
  252
]},
 "errors":[]
}
Returning 'commands_post': {'nodes': [229], 'edges': [244, 252]}
Returning 'delete_selected_nodes': {'nodes': [229], 'edges': [244, 252]}
--------------------
Calling layout_network()
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('layout apply preferred networkSelected="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/layout/apply%20preferred), json: {'networkSelected': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'layout_network': {}
--------------------
Calling create_column_filter('AngioFilter', 'name', 'Angiotensin', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'AngioFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "Angiotensin", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":227}
Returning 'cyrest_get': {'count': 227}
Returning 'get_node_count': 227
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":180}
Returning 'cyrest_get': {'count': 180}
Returning 'get_edge_count': 180
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_node_count': 0
Returning 'get_selected_nodes': None
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': None, 'edges': None}
--------------------
Calling create_column_filter('ROSFilter', 'name', 'ox', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "ox", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "ox", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":227}
Returning 'cyrest_get': {'count': 227}
Returning 'get_node_count': 227
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":180}
Returning 'cyrest_get': {'count': 180}
Returning 'get_edge_count': 180
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [223,227,839]
Returning 'cyrest_get': [223, 227, 839]
Returning 'get_selected_node_count': 3
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [223,227,839]
Returning 'cyrest_get': [223, 227, 839]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,727,217,729,218,219,731,733,222,223,735,224,225,737,1249,739,227,741,229,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 727, 217, 729, 218, 219, 731, 733, 222, 223, 735, 224, 225, 737, 1249, 739, 227, 741, 229, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","GNAQ","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","CALM1","Increased, Reactive oxygen species","CREB1","Increase activation, Nuclear factor kappa B (NF-kB)","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'GNAQ', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'CALM1', 'Increased, Reactive oxygen species', 'CREB1', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
Returning 'get_table_columns':          name
1116    IL12A
1118   PYCARD
1120     IRF7
1122    PTGES
1126   CXCL16
...       ...
464   COL28A1
466   COL21A1
468   COL22A1
470   PCOLCE2
478    C9orf3

[227 rows x 1 columns]
Returning 'get_selected_nodes': ['Oxidative stress', 'Increased, Reactive oxygen species', 'HMOX1']
Calling get_selected_edges(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_edge_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges), params: {'column': 'selected', 'query': 'true'}
OK[200], content: []
Returning 'cyrest_get': []
Returning 'get_selected_edge_count': 0
Returning 'get_selected_edges': None
Returning 'create_column_filter': {'nodes': ['Oxidative stress', 'Increased, Reactive oxygen species', 'HMOX1'], 'edges': None}
--------------------
Calling create_column_filter('ROSFilter', 'name', 'oxidative stress', 'CONTAINS')
Calling set_current_network(None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None)
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling commands_post('network set current network="SUID:201"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/set%20current), json: {'network': 'SUID:201'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'commands_post': {}
Returning 'set_current_network': {}
Calling get_table_column_names('node', base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_names': ['SUID', 'shared name', 'name', 'selected', 'GraphID', 'Type', 'XrefId', 'XrefDatasource', 'Color', 'Border Width', 'Node Size', 'Label Font Size', 'Ensembl', 'CTL.Ext', 'CTL.Type', 'CTL.PathwayName', 'CTL.label', 'CTL.PathwayID', 'CTL.GeneName', 'CTL.GeneID', 'logFC', 'logCPM', 'F', 'PValue', 'FDR']
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling cyrest_post('commands/filter/create', body={'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "oxidative stress", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}, base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/filter/create), json: {'name': 'ROSFilter', 'json': '{"id": "ColumnFilter", "parameters": {"criterion": "oxidative stress", "columnName": "name", "predicate": "CONTAINS", "caseSensitive": false, "anyMatch": true, "type": "nodes"}}'}
OK[200], content: {
 "data": {},
 "errors":[]
}
Returning 'cyrest_post': {'data': {}, 'errors': []}
Calling get_node_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes/count)
OK[200], content: {"count":227}
Returning 'cyrest_get': {'count': 227}
Returning 'get_node_count': 227
Calling get_edge_count(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/edges/count', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/edges/count)
OK[200], content: {"count":180}
Returning 'cyrest_get': {'count': 180}
Returning 'get_edge_count': 180
Calling cytoscape_version_info(base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('version', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/version)
OK[200], content: {"apiVersion":"v1","cytoscapeVersion":"3.8.2"}
Returning 'cyrest_get': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2'}
Returning 'cytoscape_version_info': {'apiVersion': 'v1', 'cytoscapeVersion': '3.8.2', 'automationAPIVersion': '1.2.0', 'py4cytoscapeVersion': '0.0.9'}
Calling get_selected_nodes(network=None, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(None, base_url='http://127.0.0.1:1234/v1')
Calling commands_post('network get attribute network="current" namespace="default" columnList="SUID"', base_url='http://127.0.0.1:1234/v1')
HTTP POST(http://127.0.0.1:1234/v1/commands/network/get%20attribute), json: {'network': 'current', 'namespace': 'default', 'columnList': 'SUID'}
OK[200], content: {
 "data": [ {
  "SUID": 201
}
],
 "errors":[]
}
Returning 'commands_post': [{'SUID': 201}]
Returning 'get_network_suid': 201
Calling get_selected_node_count(201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'}, base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [223]
Returning 'cyrest_get': [223]
Returning 'get_selected_node_count': 1
Calling cyrest_get('networks/201/nodes', parameters={'column': 'selected', 'query': 'true'})
HTTP GET(http://127.0.0.1:1234/v1/networks/201/nodes), params: {'column': 'selected', 'query': 'true'}
OK[200], content: [223]
Returning 'cyrest_get': [223]
Calling get_table_columns('node', ['name'], 'default', 201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, 'http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling get_table_column_types('node', namespace='default', network=201, base_url='http://127.0.0.1:1234/v1')
Calling get_network_suid(201, base_url='http://127.0.0.1:1234/v1')
Calling cyrest_get('networks', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks)
OK[200], content: [201,78]
Returning 'cyrest_get': [201, 78]
Returning 'get_network_suid': 201
Calling cyrest_get('networks/201/tables/defaultnode/columns', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns)
OK[200], content: [{"name":"SUID","type":"Long","immutable":true,"primaryKey":true},{"name":"shared name","type":"String","immutable":true,"primaryKey":false},{"name":"name","type":"String","immutable":true,"primaryKey":false},{"name":"selected","type":"Boolean","immutable":true,"primaryKey":false},{"name":"GraphID","type":"String","immutable":false,"primaryKey":false},{"name":"Type","type":"String","immutable":false,"primaryKey":false},{"name":"XrefId","type":"String","immutable":false,"primaryKey":false},{"name":"XrefDatasource","type":"String","immutable":false,"primaryKey":false},{"name":"Color","type":"String","immutable":false,"primaryKey":false},{"name":"Border Width","type":"Double","immutable":false,"primaryKey":false},{"name":"Node Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Label Font Size","type":"Double","immutable":false,"primaryKey":false},{"name":"Ensembl","type":"String","immutable":true,"primaryKey":false},{"name":"CTL.Ext","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.Type","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.label","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.PathwayID","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneName","type":"String","immutable":false,"primaryKey":false},{"name":"CTL.GeneID","type":"String","immutable":false,"primaryKey":false},{"name":"logFC","type":"Double","immutable":false,"primaryKey":false},{"name":"logCPM","type":"Double","immutable":false,"primaryKey":false},{"name":"F","type":"Double","immutable":false,"primaryKey":false},{"name":"PValue","type":"Double","immutable":false,"primaryKey":false},{"name":"FDR","type":"Double","immutable":false,"primaryKey":false}]
Returning 'cyrest_get': [{'name': 'SUID', 'type': 'Long', 'immutable': True, 'primaryKey': True}, {'name': 'shared name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'name', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'selected', 'type': 'Boolean', 'immutable': True, 'primaryKey': False}, {'name': 'GraphID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefId', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'XrefDatasource', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Color', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'Border Width', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Node Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Label Font Size', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'Ensembl', 'type': 'String', 'immutable': True, 'primaryKey': False}, {'name': 'CTL.Ext', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.Type', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.label', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.PathwayID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneName', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'CTL.GeneID', 'type': 'String', 'immutable': False, 'primaryKey': False}, {'name': 'logFC', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'logCPM', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'F', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'PValue', 'type': 'Double', 'immutable': False, 'primaryKey': False}, {'name': 'FDR', 'type': 'Double', 'immutable': False, 'primaryKey': False}]
Returning 'get_table_column_types': {'SUID': 'Long', 'shared name': 'String', 'name': 'String', 'selected': 'Boolean', 'GraphID': 'String', 'Type': 'String', 'XrefId': 'String', 'XrefDatasource': 'String', 'Color': 'String', 'Border Width': 'Double', 'Node Size': 'Double', 'Label Font Size': 'Double', 'Ensembl': 'String', 'CTL.Ext': 'String', 'CTL.Type': 'String', 'CTL.PathwayName': 'String', 'CTL.label': 'String', 'CTL.PathwayID': 'String', 'CTL.GeneName': 'String', 'CTL.GeneID': 'String', 'logFC': 'Double', 'logCPM': 'Double', 'F': 'Double', 'PValue': 'Double', 'FDR': 'Double'}
Calling cyrest_get('networks/201/tables/defaultnode/columns/SUID', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/SUID)
OK[200], content: {"name":"SUID","values":[1116,1118,1120,1122,1126,1130,1132,1152,1154,1156,1161,652,1165,655,1168,1170,1172,661,664,1176,666,1180,1182,1184,1188,677,1190,679,681,683,1195,685,687,1203,693,1205,695,1207,697,699,1212,703,1215,1220,1222,1224,713,715,717,719,1231,1233,211,1235,212,213,725,214,727,217,729,218,219,731,733,222,223,735,224,225,737,1249,739,227,741,229,230,231,743,1255,232,233,745,748,750,1263,752,755,757,759,1271,761,763,765,1277,767,769,1281,1283,773,1285,775,1287,1289,785,788,1301,1303,792,1307,798,801,803,1315,805,807,809,1321,811,813,1325,815,817,819,308,821,823,1336,314,827,1339,316,829,1341,318,831,320,833,1345,322,1347,324,837,326,839,841,330,843,332,845,334,848,338,850,852,342,854,344,856,346,858,1371,348,860,350,862,1374,864,1376,354,866,1378,356,868,358,1383,872,362,874,876,366,1391,368,372,374,1401,380,1407,384,1409,392,1416,396,398,1422,1425,406,1430,408,1432,410,412,414,416,418,424,426,428,1453,430,1455,432,434,436,440,1464,442,444,446,448,454,462,464,466,468,470,478]}
Returning 'cyrest_get': {'name': 'SUID', 'values': [1116, 1118, 1120, 1122, 1126, 1130, 1132, 1152, 1154, 1156, 1161, 652, 1165, 655, 1168, 1170, 1172, 661, 664, 1176, 666, 1180, 1182, 1184, 1188, 677, 1190, 679, 681, 683, 1195, 685, 687, 1203, 693, 1205, 695, 1207, 697, 699, 1212, 703, 1215, 1220, 1222, 1224, 713, 715, 717, 719, 1231, 1233, 211, 1235, 212, 213, 725, 214, 727, 217, 729, 218, 219, 731, 733, 222, 223, 735, 224, 225, 737, 1249, 739, 227, 741, 229, 230, 231, 743, 1255, 232, 233, 745, 748, 750, 1263, 752, 755, 757, 759, 1271, 761, 763, 765, 1277, 767, 769, 1281, 1283, 773, 1285, 775, 1287, 1289, 785, 788, 1301, 1303, 792, 1307, 798, 801, 803, 1315, 805, 807, 809, 1321, 811, 813, 1325, 815, 817, 819, 308, 821, 823, 1336, 314, 827, 1339, 316, 829, 1341, 318, 831, 320, 833, 1345, 322, 1347, 324, 837, 326, 839, 841, 330, 843, 332, 845, 334, 848, 338, 850, 852, 342, 854, 344, 856, 346, 858, 1371, 348, 860, 350, 862, 1374, 864, 1376, 354, 866, 1378, 356, 868, 358, 1383, 872, 362, 874, 876, 366, 1391, 368, 372, 374, 1401, 380, 1407, 384, 1409, 392, 1416, 396, 398, 1422, 1425, 406, 1430, 408, 1432, 410, 412, 414, 416, 418, 424, 426, 428, 1453, 430, 1455, 432, 434, 436, 440, 1464, 442, 444, 446, 448, 454, 462, 464, 466, 468, 470, 478]}
Calling cyrest_get('networks/201/tables/defaultnode/columns/name', base_url='http://127.0.0.1:1234/v1')
HTTP GET(http://127.0.0.1:1234/v1/networks/201/tables/defaultnode/columns/name)
OK[200], content: {"name":"name","values":["IL12A","PYCARD","IRF7","PTGES","CXCL16","TGFBR1","IL17C","TGFBR2","ACTA2","IL1A","RAF1","TGFB1","PTPN11","BDKRB1","F12","IL1B","SMAD3","NOS3","NR3C2","JUND","BDKRB2","IL11RA","IL6","IL11","IL36G","ATF6B","RRAS","CALML3","CALML3","CALML3","MAP2K6","CAMK1","CAMK1","CCL5","CAMK2D","IL6ST","CAMK2D","TNFSF13","CAMK2G","CAMK2G","SMAD4","CREB3","MAPK1","PDGFD","SERPING1","CXCL5","CREB3","CREB3L1","ITPR3","CREB3L1","HIF1A","CTGF","Overview of proinflammatory and profibrotic mediators","CXCL2","Kinin-Kallikrein Pathway","Increased, Prostaglandin E2 secretion","GNAQ","ACE2 inhibition","GNAQ","Collagen biosynthesis and modifying enzymes","ITPR1","KE1276: Lung Fibrosis","KE68: Collagen Accumulation","ITPR1","ITPR3","NF-KB pathway","Oxidative stress","ATF2","KE1740: ACE2 inhibition","Bradykinin system, hyperactivated","ATF4","CXCL14","CALM1","Increased, Reactive oxygen species","CREB1","Increase activation, Nuclear factor kappa B (NF-kB)","Increased, secretion of proinflammatory and profibrotic mediators","Bradykinin receptor B1 activation","CREB3L2","CX3CL1","Bradykinin signaling network","Prostaglandin signaling","CREB3L2","CREB3L4","CREB5","IL33","CREB5","CALM2","CALM3","CALML4","VEGFA","CALML4","CALML5","CALML6","LIF","ITPR2","ATF1","IL15","CSF3","PLCB2","CSF1","PLCB2","AREG","CTF1","STAR","CYP21A2","IL36RN","CXCL6","CAMK1D","CXCL3","STAR","CHUK","IKBKG","CSF2","IKBKB","NFKBIA","NFKB1","MMP1","RELA","REL","PPBP","NFKBIE","CYP1A1","NQO1","COL1A1","FOS","MAPK14","CCL20","COL1A2","NFE2L2","TNFSF13B","COL4A4","MAPK10","AHR","SERPINH1","GPX1","COL5A3","SOD1","CASP1","BMP1","CCL22","P4HA1","SOD2","COL11A2","HMOX1","GCLC","COL6A2","CAT","COL5A1","SP1","PPIB","UGT1A6","CRTAP","MAOA","GPX3","P4HA2","XDH","COL4A1","SOD3","COL5A2","MT1X","CCL28","P4HB","JUNB","COL4A2","TXNRD2","SPP1","TXNRD1","CXCL1","PLOD1","GSR","IL23A","PLOD2","GSTT2","COL7A1","MMP9","MGST1","COL23A1","NFIX","TXN2","COL12A1","IL19","COL13A1","COL17A1","COL6A1","CXCL10","COL16A1","TNF","COL18A1","IL36A","COL4A6","TSLP","COL9A2","CTSD","PTGER4","CXCL17","ACE2","IL18","REN","CCL26","ACE","CES1","CTSZ","MME","ANPEP","ATP6AP2","TLL1","ADAMTS14","MMP3","COL4A3","IL1RN","ADAMTS3","COL4A5","PCOLCE","COL8A2","CXCL11","COL8A1","COL27A1","TLL2","COL6A3","P4HA3","PLOD3","COL28A1","COL21A1","COL22A1","PCOLCE2","C9orf3"]}
Returning 'cyrest_get': {'name': 'name', 'values': ['IL12A', 'PYCARD', 'IRF7', 'PTGES', 'CXCL16', 'TGFBR1', 'IL17C', 'TGFBR2', 'ACTA2', 'IL1A', 'RAF1', 'TGFB1', 'PTPN11', 'BDKRB1', 'F12', 'IL1B', 'SMAD3', 'NOS3', 'NR3C2', 'JUND', 'BDKRB2', 'IL11RA', 'IL6', 'IL11', 'IL36G', 'ATF6B', 'RRAS', 'CALML3', 'CALML3', 'CALML3', 'MAP2K6', 'CAMK1', 'CAMK1', 'CCL5', 'CAMK2D', 'IL6ST', 'CAMK2D', 'TNFSF13', 'CAMK2G', 'CAMK2G', 'SMAD4', 'CREB3', 'MAPK1', 'PDGFD', 'SERPING1', 'CXCL5', 'CREB3', 'CREB3L1', 'ITPR3', 'CREB3L1', 'HIF1A', 'CTGF', 'Overview of proinflammatory and profibrotic mediators', 'CXCL2', 'Kinin-Kallikrein Pathway', 'Increased, Prostaglandin E2 secretion', 'GNAQ', 'ACE2 inhibition', 'GNAQ', 'Collagen biosynthesis and modifying enzymes', 'ITPR1', 'KE1276: Lung Fibrosis', 'KE68: Collagen Accumulation', 'ITPR1', 'ITPR3', 'NF-KB pathway', 'Oxidative stress', 'ATF2', 'KE1740: ACE2 inhibition', 'Bradykinin system, hyperactivated', 'ATF4', 'CXCL14', 'CALM1', 'Increased, Reactive oxygen species', 'CREB1', 'Increase activation, Nuclear factor kappa B (NF-kB)', 'Increased, secretion of proinflammatory and profibrotic mediators', 'Bradykinin receptor B1 activation', 'CREB3L2', 'CX3CL1', 'Bradykinin signaling network', 'Prostaglandin signaling', 'CREB3L2', 'CREB3L4', 'CREB5', 'IL33', 'CREB5', 'CALM2', 'CALM3', 'CALML4', 'VEGFA', 'CALML4', 'CALML5', 'CALML6', 'LIF', 'ITPR2', 'ATF1', 'IL15', 'CSF3', 'PLCB2', 'CSF1', 'PLCB2', 'AREG', 'CTF1', 'STAR', 'CYP21A2', 'IL36RN', 'CXCL6', 'CAMK1D', 'CXCL3', 'STAR', 'CHUK', 'IKBKG', 'CSF2', 'IKBKB', 'NFKBIA', 'NFKB1', 'MMP1', 'RELA', 'REL', 'PPBP', 'NFKBIE', 'CYP1A1', 'NQO1', 'COL1A1', 'FOS', 'MAPK14', 'CCL20', 'COL1A2', 'NFE2L2', 'TNFSF13B', 'COL4A4', 'MAPK10', 'AHR', 'SERPINH1', 'GPX1', 'COL5A3', 'SOD1', 'CASP1', 'BMP1', 'CCL22', 'P4HA1', 'SOD2', 'COL11A2', 'HMOX1', 'GCLC', 'COL6A2', 'CAT', 'COL5A1', 'SP1', 'PPIB', 'UGT1A6', 'CRTAP', 'MAOA', 'GPX3', 'P4HA2', 'XDH', 'COL4A1', 'SOD3', 'COL5A2', 'MT1X', 'CCL28', 'P4HB', 'JUNB', 'COL4A2', 'TXNRD2', 'SPP1', 'TXNRD1', 'CXCL1', 'PLOD1', 'GSR', 'IL23A', 'PLOD2', 'GSTT2', 'COL7A1', 'MMP9', 'MGST1', 'COL23A1', 'NFIX', 'TXN2', 'COL12A1', 'IL19', 'COL13A1', 'COL17A1', 'COL6A1', 'CXCL10', 'COL16A1', 'TNF', 'COL18A1', 'IL36A', 'COL4A6', 'TSLP', 'COL9A2', 'CTSD', 'PTGER4', 'CXCL17', 'ACE2', 'IL18', 'REN', 'CCL26', 'ACE', 'CES1', 'CTSZ', 'MME', 'ANPEP', 'ATP6AP2', 'TLL1', 'ADAMTS14', 'MMP3', 'COL4A3', 'IL1RN', 'ADAMTS3', 'COL4A5', 'PCOLCE', 'COL8A2', 'CXCL11', 'COL8A1', 'COL27A1', 'TLL2', 'COL6A3', 'P4HA3', 'PLOD3', 'COL28A1', 'COL21A1', 'COL22A1', 'PCOLCE2', 'C9orf3']}
