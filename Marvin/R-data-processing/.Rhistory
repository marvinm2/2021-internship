# get filenames
ls <- list.files(path = "./data")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y = 6,
group = factor(c(rep("control", 3), rep("case", 3)),
levels = c("control", "case")))
}
#session information
sessionInfo()
# clean work space
rm(list=ls())
# set working directory
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install packages
#used R version 4.0.5
BiocManager::install("edgeR")
library(edgeR)
library(tidyr)
library(xlsx)
library(data.table)
library(clusterProfiler)
library(dplyr)
library(ggpubr)
# functions
### filLow
filLow <- function(data){
myCPM <- cpm(data)
head(myCPM)
thresh <- myCPM > 0.5
table(rowSums(thresh))
keep <- rowSums(thresh) >= 1
data <- data[keep,]
data <- drop_na(data)
}
### exprs
exprs <- function(data,x,y,group){
y <- DGEList(counts = data[,x:y], group = group)
y <- calcNormFactors(y)
design <- model.matrix(~1 + group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
res <- as.data.frame(topTags(qlf,n=Inf))
}
# get filenames
ls <- list.files(path = "./data")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y = 6,
group = factor(c(rep("control", 3), rep("case", 3)),
levels = c("control", "case")))
}
View(dataExpr)
write.csv(dataExpr, "expData.csv")
