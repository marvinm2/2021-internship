data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =44,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
# clean work space
rm(list=ls())
# set working directory
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install packages
#used R version 4.0.5
BiocManager::install("edgeR")
library(edgeR)
library(tidyr)
library(xlsx)
library(data.table)
library(clusterProfiler)
library(dplyr)
library(ggpubr)
# functions
### filLow
filLow <- function(data){
myCPM <- cpm(data)
head(myCPM)
thresh <- myCPM > 0.5
table(rowSums(thresh))
keep <- rowSums(thresh) >= 1
data <- data[keep,]
data <- drop_na(data)
}
### exprs
exprs <- function(data,x,y,group){
y <- DGEList(counts = data[,x:y], group = group)
y <- calcNormFactors(y)
design <- model.matrix(~1 + group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
res <- as.data.frame(topTags(qlf,n=Inf))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
head(data)
class(data) <- "numeric"
# clean work space
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# load in files
counts <- read.csv("./GDS1220_hope.txt", sep="\t")
# check colnames
unique(colnames(counts))
# remove everything from box 3 from Excel sheet -- IMI, ACE, NIC
counts_fil <- counts[,!grepl("GSM49609|GSM49610|GSM49611|GSM49612|GSM49614|GSM49615|GSM49616|GSM49617|GSM49613|Gene.ID", colnames(counts))]
unique(colnames(counts_fil))
# function
split_counts <- function(x) {
y <- c("X", paste0("Control"), x)
z <- counts_fil[,grepl(paste(y, collapse = "|"), colnames(counts_fil))]
write.table(z, file = paste(x, ".txt", sep=""), row.names = F, quote = F, sep = "\t")
}
split_counts(x = "GSM")
# session information
sessionInfo()
GSM <- read.delim2("~/GitHub/2021-internship/Marvin/R-data-processing/GSM.txt", header=FALSE)
View(GSM)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
# functions
### filLow
filLow <- function(data){
myCPM <- cpm(data)
head(myCPM)
thresh <- myCPM > 0.5
table(rowSums(thresh))
keep <- rowSums(thresh) >= 1
data <- data[keep,]
data <- drop_na(data)
}
### exprs
exprs <- function(data,x,y,group){
y <- DGEList(counts = data[,x:y], group = group)
y <- calcNormFactors(y)
design <- model.matrix(~1 + group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
res <- as.data.frame(topTags(qlf,n=Inf))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
# clean work space
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# load in files
counts <- read.csv("./GDS1220_hope.txt", sep="\t")
# check colnames
unique(colnames(counts))
# remove everything from box 3 from Excel sheet -- IMI, ACE, NIC
counts_fil <- counts[,!grepl("GSM49609|GSM49610|GSM49611|GSM49612|GSM49614|GSM49615|GSM49616|GSM49617|GSM49613|Gene.ID", colnames(counts))]
unique(colnames(counts_fil))
# function
split_counts <- function(x) {
y <- c("X", paste0("Control"), x)
z <- counts_fil[,grepl(paste(y, collapse = "|"), colnames(counts_fil))]
write.table(z, file = paste(x, ".txt", sep=""), row.names = F, quote = F, sep = "\t")
}
split_counts(x = "GSM")
# session information
sessionInfo()
GSM <- read.delim2("~/GitHub/2021-internship/Marvin/R-data-processing/GSM.txt", header=FALSE, row.names=1)
View(GSM)
# functions
### filLow
filLow <- function(data){
myCPM <- cpm(data)
head(myCPM)
thresh <- myCPM > 0.5
table(rowSums(thresh))
keep <- rowSums(thresh) >= 1
data <- data[keep,]
data <- drop_na(data)
}
### exprs
exprs <- function(data,x,y,group){
y <- DGEList(counts = data[,x:y], group = group)
y <- calcNormFactors(y)
design <- model.matrix(~1 + group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
res <- as.data.frame(topTags(qlf,n=Inf))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
View(data)
View(data)
# clean work space
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# load in files
counts <- read.csv("./GDS1220_test.txt", sep="\t")
# check colnames
unique(colnames(counts))
# remove everything from box 3 from Excel sheet -- IMI, ACE, NIC
counts_fil <- counts[,!grepl("GSM49609|GSM49610|GSM49611|GSM49612|GSM49614|GSM49615|GSM49616|GSM49617|GSM49613|Gene.ID", colnames(counts))]
unique(colnames(counts_fil))
# function
split_counts <- function(x) {
y <- c("X", paste0("Control"), x)
z <- counts_fil[,grepl(paste(y, collapse = "|"), colnames(counts_fil))]
write.table(z, file = paste(x, ".txt", sep=""), row.names = F, quote = F, sep = "\t")
}
split_counts(x = "GSM")
# session information
sessionInfo()
GSM <- read.delim("~/GitHub/2021-internship/Marvin/R-data-processing/GSM.txt", header=FALSE, row.names=1)
View(GSM)
# functions
### filLow
filLow <- function(data){
myCPM <- cpm(data)
head(myCPM)
thresh <- myCPM > 0.5
table(rowSums(thresh))
keep <- rowSums(thresh) >= 1
data <- data[keep,]
data <- drop_na(data)
}
### exprs
exprs <- function(data,x,y,group){
y <- DGEList(counts = data[,x:y], group = group)
y <- calcNormFactors(y)
design <- model.matrix(~1 + group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
res <- as.data.frame(topTags(qlf,n=Inf))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
View(data)
View(GSM)
View(GSM)
View(GSM)
View(GSM)
lapply(df, as.numeric)
test = lapply(GSM, as.numeric)
warnings()
df2 = as.data.frame(sapply(data, as.numeric))
df1[] <- lapply(data, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
sapply(data, class)
df1[] <- lapply(data, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
data[] <- lapply(data, function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
sapply(data, class)
testA = sapply(data, class)
testa
testA = as.data.frame(sapply(data, class))
testA
df2 <- data.frame(apply(data, 2, function(x) as.numeric(as.character(x))))
df2
View(df2)
View(df2)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
data <- data.frame(apply(data, 2, function(x) as.numeric(as.character(x))))
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
#session information
sessionInfo()
View(GSM)
View(GSM)
View(counts)
View(counts)
View(data)
View(data)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
#session information
sessionInfo()
View(data)
View(data)
View(data)
View(data)
# functions
### filLow
filLow <- function(data){
myCPM <- cpm(data)
head(myCPM)
thresh <- myCPM > 0.5
table(rowSums(thresh))
keep <- rowSums(thresh) >= 1
data <- data[keep,]
data <- drop_na(data)
}
### exprs
exprs <- function(data,x,y,group){
y <- DGEList(counts = data[,x:y], group = group)
y <- calcNormFactors(y)
design <- model.matrix(~1 + group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
res <- as.data.frame(topTags(qlf,n=Inf))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
View(data)
View(data)
# clean work space
rm(list=ls())
# set working directory
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install packages
#used R version 4.0.5
BiocManager::install("edgeR")
library(edgeR)
library(tidyr)
library(xlsx)
library(data.table)
library(clusterProfiler)
library(dplyr)
library(ggpubr)
# functions
### filLow
filLow <- function(data){
myCPM <- cpm(data)
head(myCPM)
thresh <- myCPM > 0.5
table(rowSums(thresh))
keep <- rowSums(thresh) >= 1
data <- data[keep,]
data <- drop_na(data)
}
### exprs
exprs <- function(data,x,y,group){
y <- DGEList(counts = data[,x:y], group = group)
y <- calcNormFactors(y)
design <- model.matrix(~1 + group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
res <- as.data.frame(topTags(qlf,n=Inf))
}
# get filenames
ls <- list.files(path = "./data2")
ls <- gsub(".txt", "", ls)
# loop over files and run functions
for (fileName in ls){
# load datafile
data <- read.table(paste0("./data2/", fileName, ".txt"), header = T, sep = "\t")
# create rownames from probeID column -- column "X"
row.names(data) <- data$X
data <- data[-1]
#######################
##### FC ANALYSIS #####
#######################
# filter lowly expressed genes
data <- filLow(data = data)
# run EdgeR
dataExpr <- exprs(data = data, x = 1, y =45,
group = factor(c(rep("control", 5), rep("case", 40)),
levels = c("control", "case")))
}
View(dataExpr)
View(dataExpr)
