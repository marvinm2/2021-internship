### Change these Paths if needed ###
#CHANGED directory name
SCRIPT.DIR = "User/stefa/Documents/Github/2021-internships/Raats" #getwd()
WORK.DIR = SCRIPT.DIR
DATA.DIR = SCRIPT.DIR
ANNO.DIR = DATA.DIR
#amend paths of .DIRs if not started or closed off correctly with /
#-----------------------------------------------------------
correctDIR <- function(d) {
lastChar <- substr(d,nchar(d),nchar(d))
if((lastChar != "/") && (lastChar != "/")) d <- paste(d,"/",sep="")
return(d)
}
if(exists("DATA.DIR"))   DATA.DIR   <- correctDIR(DATA.DIR)
if(exists("SCRIPT.DIR")) SCRIPT.DIR <- correctDIR(SCRIPT.DIR)
if(exists("WORK.DIR"))   WORK.DIR   <- correctDIR(WORK.DIR)
if(exists("ANNO.DIR"))   ANNO.DIR   <- correctDIR(ANNO.DIR)
#change working directory into WORK.DIR
#--------------------------------------
setwd(WORK.DIR) #getwd()
version_nb <- "1.0.0"
cat("Script run using R version ",R.Version()$major,".",R.Version()$minor,
" and Illumina pre-processing pipeline version_",version_nb,"\n",sep="")
#set memory to maximum on Windows 32bit machines
#CHANGED to windows 64 bit
if(length(grep("w64",R.Version()$os,fixed=TRUE))>0) memory.size(4095)
reload <- function() {
source("install_libraries.R")
source("ILMN_functions_processingQC.R")
source("ILMN_functions_imagesQC.R")
#source(paste(SCRIPT.DIR,"install_libraries.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_processingQC.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_imagesQC.R",sep=""))
cat("..::..::..\n", "FUNCTIONS HAVE BEEN LOADED.\n", sep="")
}
## reload functions from source files
## ----------------------------------
reload();
setwd("~/GitHub/2021-internship/Raats")
## reload functions from source files
## ----------------------------------
reload();
#Data variables:
species   <- "Human" #"Mouse" #"Rat"
arrayType <- "Human_NHBE" #"MouseRef-8
annoType  <- "Human_NHBE_Series_1" #"MouseRef-8_V2_0_R3_11278551_A"
#infiles = list.files(DATA.DIR)
infiles = list.files()
expFile = select.list(infiles)
standALDONE = TRUE
perGroup = TRUE #reorder rawData lumibatch file FIRST on Group and THEN ON sampleNames
#lumi library packages:
lib.mapping = paste( "lumi", species, "IDMapping", sep="");
lib.All.mapping = paste( "lumi", species, "All.db", sep="");
#Importing raw data with lumi:
bgSub <- FALSE
sep = NULL
detectionTh = 0.01
na.rm = TRUE
convertNuID = TRUE
dec = '.'
parseColumnName = FALSE
checkDupId = TRUE
rawDataQC = TRUE
rawSummary = TRUE
save.rawData = TRUE
# devault normalization function to use
normType = "lumi"
# lumi normalization options
bg.correct = FALSE
bgcorrect.m = "bgAdjust"
variance.stabilize = TRUE
variance.m = "log2"
normalize = TRUE
normalization.m = "quantile"
normDataQC = TRUE
normSummary = TRUE
QC.evaluation = TRUE
save.normData = TRUE
#Filtering:
filtering = TRUE
filter.Th = 0.01 #threshold is default set on <0.01
filter.dp = 0    #detect probes >0
#Annotation:
createAnno = TRUE
#raw plots
raw.boxplot = TRUE
raw.density = TRUE
raw.cv = TRUE
raw.sampleRelation = TRUE
# devault normalization function to use
normType = "lumi"
# lumi normalization options
bg.correct = FALSE
bgcorrect.m = "bgAdjust"
variance.stabilize = TRUE
variance.m = "log2"
normalize = TRUE
normalization.m = "quantile"
normDataQC = TRUE
normSummary = TRUE
QC.evaluation = TRUE
save.normData = TRUE
#Filtering:
filtering = TRUE
filter.Th = 0.01 #threshold is default set on <0.01
filter.dp = 0    #detect probes >0
#Annotation:
createAnno = TRUE
#raw plots
raw.boxplot = TRUE
raw.density = TRUE
raw.cv = TRUE
raw.sampleRelation = TRUE
raw.pca = TRUE
raw.correl = TRUE
#norm plots
norm.boxplot = TRUE
norm.density = TRUE
norm.cv = TRUE
norm.sampleRelation = TRUE
norm.pca = TRUE
norm.correl= TRUE
# devault correlation options
clusterOption1 = "Pearson"
clusterOption2 = "complete" #"single"
#CHANGED THIS
#source(paste(SCRIPT.DIR,"run_ILMNAnalysisQCandPreProcessing.R",sep=""), local=TRUE)
source("run_ILMNAnalysisQCandPreProcessing.R")
warnings()
###############################################################################
## Create arrayTypes and arrayAnnotation lists                               ##
###############################################################################
#CHANGED humannhbe
arrayTypes = list(
Human = c( "HumanHT-12", "HumanRef-8", "HumanWG-6", "Human_NHBE"),
Mouse = c( "MouseRef-8", "MouseWG-6"),
Rat   = c( "RatRef-8")
)
arrayAnno = list(
`HumanHT-12` = c("HumanHT-12_V4_0_R2_15002873_B_WGDASL",
"HumanHT-12_V4_0_R2_15002873_B",
"HumanHT-12_V4_0_R1_15002873_B",
"HumanHT-12_V3_0_R2_11283641_A",
"HumanHT-12_V3_0_R3_11283641_A", "Human_NHBE_Series_1"),
`HumanRef-8` = c("HumanRef-8_V3_0_R3_11282963_A",
"HumanRef-8_V3_0_R2_11282963_A",
"HUMANREF-8_V3_0_R1_11282963_A_WGDASL",
"HumanRef-8_V2_0_R4_11223162_A"),
`HumanWG-6`  = c("HumanWG-6_V2_0_R4_11223189_A",
"HumanWG-6_V3_0_R2_11282955_A",
"HumanWG-6_V3_0_R3_11282955_A"),
`MouseRef-8` = c("MouseRef-8_V1_1_R4_11234312_A",
"MouseRef-8_V2_0_R2_11278551_A",
"MouseRef-8_V2_0_R3_11278551_A"),
`MouseWG-6` = c( "MouseWG-6_V1_1_R4_11234304_A",
"MouseWG-6_V2_0_R2_11278593_A",
"MouseWG-6_V2_0_R3_11278593_A"),
`RatRef-12` = c( "RatRef-12_V1_0_R5_11222119_A")
)
checkUserInput(arrayTypes, arrayAnno, species);
r
arrayAnno = list(
`HumanHT-12` = c("HumanHT-12_V4_0_R2_15002873_B_WGDASL",
"HumanHT-12_V4_0_R2_15002873_B",
"HumanHT-12_V4_0_R1_15002873_B",
"HumanHT-12_V3_0_R2_11283641_A",
"HumanHT-12_V3_0_R3_11283641_A"),
`HumanRef-8` = c("HumanRef-8_V3_0_R3_11282963_A",
"HumanRef-8_V3_0_R2_11282963_A",
"HUMANREF-8_V3_0_R1_11282963_A_WGDASL",
"HumanRef-8_V2_0_R4_11223162_A"),
`HumanWG-6`  = c("HumanWG-6_V2_0_R4_11223189_A",
"HumanWG-6_V3_0_R2_11282955_A",
`Human_NHBE` =c("Human_NHBE_Series_1")
"HumanWG-6_V3_0_R3_11282955_A"),
`MouseRef-8` = c("MouseRef-8_V1_1_R4_11234312_A",
"MouseRef-8_V2_0_R2_11278551_A",
"MouseRef-8_V2_0_R3_11278551_A"),
`MouseWG-6` = c( "MouseWG-6_V1_1_R4_11234304_A",
"MouseWG-6_V2_0_R2_11278593_A",
"MouseWG-6_V2_0_R3_11278593_A"),
`RatRef-12` = c( "RatRef-12_V1_0_R5_11222119_A")
)
arrayAnno = list(
`HumanHT-12` = c("HumanHT-12_V4_0_R2_15002873_B_WGDASL",
"HumanHT-12_V4_0_R2_15002873_B",
"HumanHT-12_V4_0_R1_15002873_B",
"HumanHT-12_V3_0_R2_11283641_A",
"HumanHT-12_V3_0_R3_11283641_A"),
`HumanRef-8` = c("HumanRef-8_V3_0_R3_11282963_A",
"HumanRef-8_V3_0_R2_11282963_A",
"HUMANREF-8_V3_0_R1_11282963_A_WGDASL",
"HumanRef-8_V2_0_R4_11223162_A"),
`HumanWG-6`  = c("HumanWG-6_V2_0_R4_11223189_A",
"HumanWG-6_V3_0_R2_11282955_A",
`Human_NHBE` =c("Human_NHBE_Series_1"),
"HumanWG-6_V3_0_R3_11282955_A"),
`MouseRef-8` = c("MouseRef-8_V1_1_R4_11234312_A",
"MouseRef-8_V2_0_R2_11278551_A",
"MouseRef-8_V2_0_R3_11278551_A"),
`MouseWG-6` = c( "MouseWG-6_V1_1_R4_11234304_A",
"MouseWG-6_V2_0_R2_11278593_A",
"MouseWG-6_V2_0_R3_11278593_A"),
`RatRef-12` = c( "RatRef-12_V1_0_R5_11222119_A")
)
checkUserInput(arrayTypes, arrayAnno, species);
# create path to datafile
#CHANGED removed paste dir thing
expData <-  expFile
# load raw data as lumi batch file
cat("..::..::..\n",
"LOADING RAW DATA FILE: \n", sep="")
rawData <- import.rawData(expData, detectionTh ,convertNuID,
checkDupId, lib.mapping, dec,
parseColumnName, rawDataQC);
cat("..::..::..\n",
"RAW DATA FILE LOADED.\n", sep="")
#create generic sampleNames with function make.names
sampleNames(rawData)<- make.names(sampleNames(rawData))
###############################################################################
## Check description file                                                    ##
###############################################################################
cat("..::..::..\n",
"CHECKING DISCRIPTION FILE.\n", sep="")
#create new column with format sampleNames as read-in with make.names
description$arraySampleNames = make.names(description[,1])
if( sum( length(sampleNames(rawData)) - length(description[,1]))  > 0)
stop("error: Number of array names in raw data file and number of array
names in description file is not of the same size")
#Match sampleNames from datafile with first column from description file
file_order <- match(description[,4],sampleNames(rawData))
#Check on NA values in file_order; if na in file_order stop
if(sum(is.na(file_order)) > 0)
stop("error: Assigned array names in raw data file and file names
in description file do not match")
#Check if every sampleName is unique in description file
if(length(description[,2]) != length(unique(description[,2])) )
stop("error: Assigned sampleNames are not unique")
cat("..::..::..\n",
"DISCRIPTION FILE OK!\n", sep="")
#Change order of rawData in order of file_order
rawData <- rawData[,file_order]
###############################################################################
## reorder rawData lumibatch file on Group and sampleNames                   ##
###############################################################################
if(perGroup) {
cat("..::..::..\n",
"RE-ORDERING 'RAW' DATA FILE PER GROUP\n", sep="")
description2 =  description[order(description[,3], description[,2]), ]
#Match sampleNames from datafile with first column from description file
file_order2 <- match(description2[,4],sampleNames(rawData))
if(sum(is.na(file_order2)) > 0)
stop("error: file names in data directory and file names in description file do not match")
rawData <- rawData[,file_order2]
# change sampleNames into reordered description file
sampleNames(rawData)<- as.character(description2[,2])
} else {
# change sampleNames into loaded description file
sampleNames(rawData)<- as.character(description[,2])
}
# if bgSub = TRUE
if(bgSub) {
# normalize lumi batch raw data object
cat("..::..::..\n",
paste("NORMALIZING 'RAW' DATA FILE:", expFile), "\n", sep="")
normData <- lumi.normData(rawData,
bg.correct=FALSE, bgcorrect.m,
variance.stabilize, variance.m,
normalize, normalization.m,
normDataQC);
# if bgSub = FALSE
} else {
cat("..::..::..\n",
paste("LOADING 'CONTROL' DATA FILE ", bgFile), "\n", sep="")
controlData <- paste(DATA.DIR, bgFile, sep="")
# checks headers of controlData file with rawData object
# add control data to the rawData lumi batch object file
cat("..::..::..\n",
"COMBINING 'CONTROL' DATA WITH 'RAW' DATA FILE.\n", sep="")
rawData.ctrl <- addControlData2lumi(controlData, rawData)
# get control data in a data.frame
controlData <- as.data.frame(getControlData(rawData.ctrl), row.names = NULL )
# normalize lumi batch raw data object using 'lumi' or 'neqc' function
cat("..::..::..\n",
paste("NORMALIZING 'RAW' DATA FILE:", bgFile), ".\n", sep="")
switch (normType,
lumi = normData <- lumi.normData(rawData.ctrl,
bg.correct=TRUE, bgCorrect.m,
variance.stabilize, variance.m,
normalize, normalization.m,
normDataQC),
neqc = normData <- neqc.normData(rawData.ctrl, controlData)
)
}
# create rawData exprs eset table
#---------------------------------
eset.rawData <- exprs(rawData)
# create normData exprs eset table
#---------------------------------
eset.normData <- exprs(normData)
##raw data
if (rawSummary){
cat("..::..::..\n",
"CREATE 'RAW' SUMMARY FILE. \n", sep="")
rawSum.table = createSummary(rawData, fn=paste(ns,"summary.rawData.txt",sep='_') );
}
##normalized data
if(normSummary && QC.evaluation){
cat("..::..::..\n",
"CREATE 'NORMALIZED' SUMMARY FILE. \n", sep="")
normSum.table = createSummary(normData, fn=paste(ns,"summary.normData.txt",sep='_') );
}
# raw data
if(save.rawData) {
cat("..::..::..\n",
"CREATE R OBJECT FILE of 'RAW' DATA.\n", sep="")
save(rawData, file = paste(ns, 'rawData.Rdata', sep='_') )
}
# clean work space
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# load in files
counts <- read.csv("./GSE147507_RawReadCounts_Human.tsv", sep="\t")
# check colnames
unique(colnames(counts))
# remove everything from box 3 from Excel sheet -- IMI, ACE, NIC
counts_fil <- counts[,!grepl("A549|Calu3|HealthyLungBiopsy|COVID|Series9", colnames(counts))]
unique(colnames(counts_fil))
# function
split_counts <- function(x) {
y <- c("X", paste0("Series1_NHBE_Mock"), x)
z <- counts_fil[,grepl(paste(y, collapse = "|"), colnames(counts_fil))]
write.table(z, file = paste(x, ".txt", sep=""), row.names = F, quote = F, sep = "\t")
}
# use function to split
split_counts(x = "Series1_NHBE_SARS.CoV.2")
# session information
sessionInfo()
# clean work space
rm(list=ls())
# set working directory
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install packages
#BiocManager::install("edgeR")
library(edgeR)
