### Change these Paths if needed ###
#CHANGED directory name
SCRIPT.DIR = "User/stefa/Documents/Github/2021-internships/Raats" #getwd()
WORK.DIR = SCRIPT.DIR
DATA.DIR = SCRIPT.DIR
ANNO.DIR = DATA.DIR
#amend paths of .DIRs if not started or closed off correctly with /
#-----------------------------------------------------------
correctDIR <- function(d) {
lastChar <- substr(d,nchar(d),nchar(d))
if((lastChar != "/") && (lastChar != "/")) d <- paste(d,"/",sep="")
return(d)
}
if(exists("DATA.DIR"))   DATA.DIR   <- correctDIR(DATA.DIR)
if(exists("SCRIPT.DIR")) SCRIPT.DIR <- correctDIR(SCRIPT.DIR)
if(exists("WORK.DIR"))   WORK.DIR   <- correctDIR(WORK.DIR)
if(exists("ANNO.DIR"))   ANNO.DIR   <- correctDIR(ANNO.DIR)
#change working directory into WORK.DIR
#--------------------------------------
setwd(WORK.DIR) #getwd()
version_nb <- "1.0.0"
cat("Script run using R version ",R.Version()$major,".",R.Version()$minor,
" and Illumina pre-processing pipeline version_",version_nb,"\n",sep="")
#set memory to maximum on Windows 32bit machines
#CHANGED to windows 64 bit
if(length(grep("w64",R.Version()$os,fixed=TRUE))>0) memory.size(4095)
reload <- function() {
source("install_libraries.R")
source("ILMN_functions_processingQC.R")
source("ILMN_functions_imagesQC.R")
#source(paste(SCRIPT.DIR,"install_libraries.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_processingQC.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_imagesQC.R",sep=""))
cat("..::..::..\n", "FUNCTIONS HAVE BEEN LOADED.\n", sep="")
}
## reload functions from source files
## ----------------------------------
reload();
reload <- function() {
source("install_libraries.R")
source("ILMN_functions_processingQC.R")
source("ILMN_functions_imagesQC.R")
#source(paste(SCRIPT.DIR,"install_libraries.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_processingQC.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_imagesQC.R",sep=""))
cat("..::..::..\n", "FUNCTIONS HAVE BEEN LOADED.\n", sep="")
}
## reload functions from source files
## ----------------------------------
reload();
setwd("~/GitHub/2021-internship/Raats")
source(paste(SCRIPT.DIR,"install_libraries.R",sep=""))
reload <- function() {
source("install_libraries.R")
source("ILMN_functions_processingQC.R")
source("ILMN_functions_imagesQC.R")
source(paste(SCRIPT.DIR,"install_libraries.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_processingQC.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_imagesQC.R",sep=""))
cat("..::..::..\n", "FUNCTIONS HAVE BEEN LOADED.\n", sep="")
}
## reload functions from source files
## ----------------------------------
reload();
reload <- function() {
#source("install_libraries.R")
# source("ILMN_functions_processingQC.R")
# source("ILMN_functions_imagesQC.R")
source(paste(SCRIPT.DIR,"install_libraries.R",sep=""))
source(paste(SCRIPT.DIR,"ILMN_functions_processingQC.R",sep=""))
source(paste(SCRIPT.DIR,"ILMN_functions_imagesQC.R",sep=""))
cat("..::..::..\n", "FUNCTIONS HAVE BEEN LOADED.\n", sep="")
}
## reload functions from source files
## ----------------------------------
reload();
### Change these Paths if needed ###
#CHANGED directory name
SCRIPT.DIR = "User/stefa/Documents/Github/2021-internships/Raats" #getwd()
WORK.DIR = SCRIPT.DIR
DATA.DIR = SCRIPT.DIR
ANNO.DIR = DATA.DIR
#amend paths of .DIRs if not started or closed off correctly with /
#-----------------------------------------------------------
correctDIR <- function(d) {
lastChar <- substr(d,nchar(d),nchar(d))
if((lastChar != "/") && (lastChar != "/")) d <- paste(d,"/",sep="")
return(d)
}
if(exists("DATA.DIR"))   DATA.DIR   <- correctDIR(DATA.DIR)
if(exists("SCRIPT.DIR")) SCRIPT.DIR <- correctDIR(SCRIPT.DIR)
if(exists("WORK.DIR"))   WORK.DIR   <- correctDIR(WORK.DIR)
if(exists("ANNO.DIR"))   ANNO.DIR   <- correctDIR(ANNO.DIR)
#change working directory into WORK.DIR
#--------------------------------------
setwd(WORK.DIR) #getwd()
version_nb <- "1.0.0"
cat("Script run using R version ",R.Version()$major,".",R.Version()$minor,
" and Illumina pre-processing pipeline version_",version_nb,"\n",sep="")
#set memory to maximum on Windows 32bit machines
#CHANGED to windows 64 bit
if(length(grep("w64",R.Version()$os,fixed=TRUE))>0) memory.size(4095)
reload <- function() {
source("install_libraries.R")
source("ILMN_functions_processingQC.R")
source("ILMN_functions_imagesQC.R")
#source(paste(SCRIPT.DIR,"install_libraries.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_processingQC.R",sep=""))
#source(paste(SCRIPT.DIR,"ILMN_functions_imagesQC.R",sep=""))
cat("..::..::..\n", "FUNCTIONS HAVE BEEN LOADED.\n", sep="")
}
## reload functions from source files
## ----------------------------------
reload();
#Data variables:
species   <- "Human" #"Mouse" #"Rat"
arrayType <- "Human_NHBE" #"MouseRef-8
annoType  <- "Human_NHBE_Series_1" #"MouseRef-8_V2_0_R3_11278551_A"
#infiles = list.files(DATA.DIR)
infiles = list.files()
expFile = select.list(infiles)
standALDONE = TRUE
perGroup = TRUE #reorder rawData lumibatch file FIRST on Group and THEN ON sampleNames
#lumi library packages:
lib.mapping = paste( "lumi", species, "IDMapping", sep="");
lib.All.mapping = paste( "lumi", species, "All.db", sep="");
#Importing raw data with lumi:
bgSub <- FALSE
sep = NULL
detectionTh = 0.01
na.rm = TRUE
convertNuID = TRUE
dec = '.'
parseColumnName = FALSE
checkDupId = TRUE
rawDataQC = TRUE
rawSummary = TRUE
save.rawData = TRUE
# devault normalization function to use
normType = "lumi"
# lumi normalization options
bg.correct = FALSE
bgcorrect.m = "bgAdjust"
variance.stabilize = TRUE
variance.m = "log2"
normalize = TRUE
normalization.m = "quantile"
normDataQC = TRUE
normSummary = TRUE
QC.evaluation = TRUE
save.normData = TRUE
#Filtering:
filtering = TRUE
filter.Th = 0.01 #threshold is default set on <0.01
filter.dp = 0    #detect probes >0
#Annotation:
createAnno = TRUE
#raw plots
raw.boxplot = TRUE
raw.density = TRUE
raw.cv = TRUE
raw.sampleRelation = TRUE
raw.pca = TRUE
raw.correl = TRUE
#norm plots
norm.boxplot = TRUE
norm.density = TRUE
norm.cv = TRUE
norm.sampleRelation = TRUE
norm.pca = TRUE
norm.correl= TRUE
# devault correlation options
clusterOption1 = "Pearson"
clusterOption2 = "complete" #"single"
#CHANGED THIS
#source(paste(SCRIPT.DIR,"run_ILMNAnalysisQCandPreProcessing.R",sep=""), local=TRUE)
source("run_ILMNAnalysisQCandPreProcessing.R")
source("run_ILMNAnalysisQCandPreProcessing.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
f (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
loadPackages(pkgs);
loadPackages <- function(man) {
#function to check if all mandatory packages are installed
checkInstalledPackages(man)
cat("..::..::..\n",
"Loading library packages:\n", sep="")
# for each factor (package) in fMan load package in quiet mode
for (i in 1:length(man) ) {
library(man[i] , character.only = TRUE, quietly=TRUE )
print( paste (" '",man[i] ,"'" , " has been loaded", sep= "") )
}
}
#function to check if all mandatory packages are installed
checkInstalledPackages(man)
cat("..::..::..\n",
"Loading library packages:\n", sep="")
# for each factor (package) in fMan load package in quiet mode
for (i in 1:length(man) ) {
library(man[i] , character.only = TRUE, quietly=TRUE )
print( paste (" '",man[i] ,"'" , " has been loaded", sep= "") )
}
loadPackages <- function(man) {
#function to check if all mandatory packages are installed
checkInstalledPackages(man)
cat("..::..::..\n",
"Loading library packages:\n", sep="")
# for each factor (package) in fMan load package in quiet mode
for (i in 1:length(man) ) {
library(man[i] , character.only = TRUE, quietly=TRUE )
print( paste (" '",man[i] ,"'" , " has been loaded", sep= "") )
}
}
checkInstalledPackages <- function(man) {
# perform installation of mandatory packages
# get a list of all the installed packages
inst<-installed.packages()
# check if mandatory packages are listed in installed list
notInst<-man[!(man %in% inst[,1])]
if ( length( notInst)!=0 ) {
print("Some of the mandatory packages are missing, we are now going to install them", sep="")
# install packages not installed
source("http://www.bioconductor.org/biocLite.R")
biocLite( notInst)
# get a new list of all the installed packages
inst<-installed.packages()
# check for second time if mandatory packages are listed in new installed list
notInst2 <- man[!(man %in% inst[,1])]
if ( length( notInst2)==0) {
print( paste("Ok, required package is installed and loaded: ", man, sep=" ") )
} else {
res <- ( paste("!!!Check if followwing package:", notInst2,
"is available in the repository.",
"And try a manual install of the package", sep= " ") )
}
} else {
res<-( paste("Ok, required package installed:" , man, sep=" ") )
}
return(res)
}
checkInstalledPackages <- function(man) {
# perform installation of mandatory packages
# get a list of all the installed packages
inst<-installed.packages()
# check if mandatory packages are listed in installed list
notInst<-man[!(man %in% inst[,1])]
if ( length( notInst)!=0 ) {
print("Some of the mandatory packages are missing, we are now going to install them", sep="")
# install packages not installed
source("http://www.bioconductor.org/biocLite.R")
biocLite( notInst)
# get a new list of all the installed packages
inst<-installed.packages()
# check for second time if mandatory packages are listed in new installed list
notInst2 <- man[!(man %in% inst[,1])]
if ( length( notInst2)==0) {
print( paste("Ok, required package is installed and loaded: ", man, sep=" ") )
} else {
res <- ( paste("!!!Check if followwing package:", notInst2,
"is available in the repository.",
"And try a manual install of the package", sep= " ") )
}
} else {
res<-( paste("Ok, required package installed:" , man, sep=" ") )
}
return(res)
}
loadPackages(pkgs);
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
getwd()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
checkInstalledPackages <- function(man) {
# perform installation of mandatory packages
# get a list of all the installed packages
inst<-installed.packages()
# check if mandatory packages are listed in installed list
notInst<-man[!(man %in% inst[,1])]
if ( length( notInst)!=0 ) {
print("Some of the mandatory packages are missing, we are now going to install them", sep="")
# install packages not installed
source("http://www.bioconductor.org/biocLite.R")
biocLite( notInst)
# get a new list of all the installed packages
inst<-installed.packages()
# check for second time if mandatory packages are listed in new installed list
notInst2 <- man[!(man %in% inst[,1])]
if ( length( notInst2)==0) {
print( paste("Ok, required package is installed and loaded: ", man, sep=" ") )
} else {
res <- ( paste("!!!Check if followwing package:", notInst2,
"is available in the repository.",
"And try a manual install of the package", sep= " ") )
}
} else {
res<-( paste("Ok, required package installed:" , man, sep=" ") )
}
return(res)
}
loadPackages(pkgs);
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
source('~/GitHub/2021-internship/Raats/install_libraries.R')
install.packages("BiocManager")
#CHANGED THIS
#source(paste(SCRIPT.DIR,"run_ILMNAnalysisQCandPreProcessing.R",sep=""), local=TRUE)
source("run_ILMNAnalysisQCandPreProcessing.R")
